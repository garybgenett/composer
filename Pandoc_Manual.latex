\documentclass[]{book}
\usepackage{lmodern}
\usepackage{amssymb,amsmath}
\usepackage{ifxetex,ifluatex}
\usepackage{fixltx2e} % provides \textsubscript
\ifnum 0\ifxetex 1\fi\ifluatex 1\fi=0 % if pdftex
  \usepackage[T1]{fontenc}
  \usepackage[utf8]{inputenc}
\else % if luatex or xelatex
  \ifxetex
    \usepackage{mathspec}
    \usepackage{xltxtra,xunicode}
  \else
    \usepackage{fontspec}
  \fi
  \defaultfontfeatures{Mapping=tex-text,Scale=MatchLowercase}
  \newcommand{\euro}{â‚¬}
\fi
% use upquote if available, for straight quotes in verbatim environments
\IfFileExists{upquote.sty}{\usepackage{upquote}}{}
% use microtype if available
\IfFileExists{microtype.sty}{%
\usepackage{microtype}
\UseMicrotypeSet[protrusion]{basicmath} % disable protrusion for tt fonts
}{}
\usepackage[margin=0.8in]{geometry}
\usepackage{listings}
\usepackage{longtable,booktabs}
\ifxetex
  \usepackage[setpagesize=false, % page size defined by xetex
              unicode=false, % unicode breaks when used with xetex
              xetex]{hyperref}
\else
  \usepackage[unicode=true]{hyperref}
\fi
\hypersetup{breaklinks=true,
            bookmarks=true,
            pdfauthor={John MacFarlane},
            pdftitle={Pandoc User's Guide},
            colorlinks=true,
            citecolor=blue,
            urlcolor=blue,
            linkcolor=magenta,
            pdfborder={0 0 0}}
\urlstyle{same}  % don't use monospace font for urls
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt plus 2pt minus 1pt}
\setlength{\emergencystretch}{3em}  % prevent overfull lines
\setcounter{secnumdepth}{0}

\title{Pandoc User's Guide}
\author{John MacFarlane}
\date{August 30, 2014}

\begin{document}
\maketitle

\chapter{Synopsis}\label{synopsis}

pandoc {[}\emph{options}{]} {[}\emph{input-file}{]}\ldots{}

\chapter{Description}\label{description}

Pandoc is a \href{http://www.haskell.org/}{Haskell} library for
converting from one markup format to another, and a command-line tool
that uses this library. It can read
\href{http://daringfireball.net/projects/markdown/}{markdown} and
(subsets of) \href{http://redcloth.org/textile}{Textile},
\href{http://docutils.sourceforge.net/docs/ref/rst/introduction.html}{reStructuredText},
\href{http://www.w3.org/TR/html40/}{HTML},
\href{http://www.latex-project.org/}{LaTeX},
\href{http://www.mediawiki.org/wiki/Help:Formatting}{MediaWiki markup},
\href{http://twiki.org/cgi-bin/view/TWiki/TextFormattingRules}{TWiki
markup},
\href{http://www.haskell.org/haddock/doc/html/ch03s08.html}{Haddock
markup}, \href{http://dev.opml.org/spec2.html}{OPML},
\href{http://orgmode.org}{Emacs Org-mode},
\href{http://www.docbook.org/}{DocBook},
\href{http://txt2tags.org/}{txt2tags}, \href{http://idpf.org/epub}{EPUB}
and
\href{http://www.microsoft.com/interop/openup/openxml/default.aspx}{Word
docx}; and it can write plain text,
\href{http://daringfireball.net/projects/markdown/}{markdown},
\href{http://docutils.sourceforge.net/docs/ref/rst/introduction.html}{reStructuredText},
\href{http://www.w3.org/TR/xhtml1/}{XHTML},
\href{http://www.w3.org/TR/html5/}{HTML 5},
\href{http://www.latex-project.org/}{LaTeX} (including
\href{http://www.tex.ac.uk/CTAN/macros/latex/contrib/beamer}{beamer}
slide shows), \href{http://www.pragma-ade.nl/}{ConTeXt},
\href{http://en.wikipedia.org/wiki/Rich_Text_Format}{RTF},
\href{http://dev.opml.org/spec2.html}{OPML},
\href{http://www.docbook.org/}{DocBook},
\href{http://opendocument.xml.org/}{OpenDocument},
\href{http://en.wikipedia.org/wiki/OpenDocument}{ODT},
\href{http://www.microsoft.com/interop/openup/openxml/default.aspx}{Word
docx}, \href{http://www.gnu.org/software/texinfo/}{GNU Texinfo},
\href{http://www.mediawiki.org/wiki/Help:Formatting}{MediaWiki markup},
\href{https://www.dokuwiki.org/dokuwiki}{DokuWiki markup},
\href{http://www.haskell.org/haddock/doc/html/ch03s08.html}{Haddock
markup}, \href{http://idpf.org/epub}{EPUB} (v2 or v3),
\href{http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1}{FictionBook2},
\href{http://redcloth.org/textile}{Textile},
\href{http://developer.apple.com/DOCUMENTATION/Darwin/Reference/ManPages/man7/groff_man.7.html}{groff
man} pages, \href{http://orgmode.org}{Emacs Org-Mode},
\href{http://www.methods.co.nz/asciidoc/}{AsciiDoc},
\href{https://www.adobe.com/content/dam/Adobe/en/devnet/indesign/cs55-docs/IDML/idml-specification.pdf}{InDesign
ICML}, and \href{http://www.w3.org/Talks/Tools/Slidy/}{Slidy},
\href{http://goessner.net/articles/slideous/}{Slideous},
\href{http://paulrouget.com/dzslides/}{DZSlides},
\href{http://lab.hakim.se/reveal-js/}{reveal.js} or
\href{http://meyerweb.com/eric/tools/s5/}{S5} HTML slide shows. It can
also produce \href{http://www.adobe.com/pdf/}{PDF} output on systems
where LaTeX is installed.

Pandoc's enhanced version of markdown includes syntax for footnotes,
tables, flexible ordered lists, definition lists, fenced code blocks,
superscript, subscript, strikeout, title blocks, automatic tables of
contents, embedded LaTeX math, citations, and markdown inside HTML block
elements. (These enhancements, described below under
\hyperref[pandocs-markdown]{Pandoc's markdown}, can be disabled using
the \lstinline!markdown_strict! input or output format.)

In contrast to most existing tools for converting markdown to HTML,
which use regex substitutions, Pandoc has a modular design: it consists
of a set of readers, which parse text in a given format and produce a
native representation of the document, and a set of writers, which
convert this native representation into a target format. Thus, adding an
input or output format requires only adding a reader or writer.

\section{\texorpdfstring{Using
\lstinline!pandoc!}{Using pandoc}}\label{using-pandoc}

If no \emph{input-file} is specified, input is read from \emph{stdin}.
Otherwise, the \emph{input-files} are concatenated (with a blank line
between each) and used as input. Output goes to \emph{stdout} by default
(though output to \emph{stdout} is disabled for the \lstinline!odt!,
\lstinline!docx!, \lstinline!epub!, and \lstinline!epub3! output
formats). For output to a file, use the \lstinline!-o! option:

\begin{lstlisting}
pandoc -o output.html input.txt
\end{lstlisting}

By default, pandoc produces a document fragment, not a standalone
document with a proper header and footer. To produce a standalone
document, use the \lstinline!-s! or \lstinline!--standalone! flag:

\begin{lstlisting}
pandoc -s -o output.html input.txt
\end{lstlisting}

For more information on how standalone documents are produced, see
\hyperref[templates]{Templates}, below.

Instead of a file, an absolute URI may be given. In this case pandoc
will fetch the content using HTTP:

\begin{lstlisting}
pandoc -f html -t markdown http://www.fsf.org
\end{lstlisting}

If multiple input files are given, \lstinline!pandoc! will concatenate
them all (with blank lines between them) before parsing. This feature is
disabled for binary input formats such as \lstinline!EPUB! and
\lstinline!docx!.

The format of the input and output can be specified explicitly using
command-line options. The input format can be specified using the
\lstinline!-r/--read! or \lstinline!-f/--from! options, the output
format using the \lstinline!-w/--write! or \lstinline!-t/--to! options.
Thus, to convert \lstinline!hello.txt! from markdown to LaTeX, you could
type:

\begin{lstlisting}
pandoc -f markdown -t latex hello.txt
\end{lstlisting}

To convert \lstinline!hello.html! from html to markdown:

\begin{lstlisting}
pandoc -f html -t markdown hello.html
\end{lstlisting}

Supported output formats are listed below under the \lstinline!-t/--to!
option. Supported input formats are listed below under the
\lstinline!-f/--from! option. Note that the \lstinline!rst!,
\lstinline!textile!, \lstinline!latex!, and \lstinline!html! readers are
not complete; there are some constructs that they do not parse.

If the input or output format is not specified explicitly,
\lstinline!pandoc! will attempt to guess it from the extensions of the
input and output filenames. Thus, for example,

\begin{lstlisting}
pandoc -o hello.tex hello.txt
\end{lstlisting}

will convert \lstinline!hello.txt! from markdown to LaTeX. If no output
file is specified (so that output goes to \emph{stdout}), or if the
output file's extension is unknown, the output format will default to
HTML. If no input file is specified (so that input comes from
\emph{stdin}), or if the input files' extensions are unknown, the input
format will be assumed to be markdown unless explicitly specified.

Pandoc uses the UTF-8 character encoding for both input and output. If
your local character encoding is not UTF-8, you should pipe input and
output through \lstinline!iconv!:

\begin{lstlisting}
iconv -t utf-8 input.txt | pandoc | iconv -f utf-8
\end{lstlisting}

Note that in some output formats (such as HTML, LaTeX, ConTeXt, RTF,
OPML, DocBook, and Texinfo), information about the character encoding is
included in the document header, which will only be included if you use
the \lstinline!-s/--standalone! option.

\section{Creating a PDF}\label{creating-a-pdf}

Earlier versions of pandoc came with a program,
\lstinline!markdown2pdf!, that used pandoc and pdflatex to produce a
PDF. This is no longer needed, since \lstinline!pandoc! can now produce
\lstinline!pdf! output itself. To produce a PDF, simply specify an
output file with a \lstinline!.pdf! extension. Pandoc will create a
latex file and use pdflatex (or another engine, see
\lstinline!--latex-engine!) to convert it to PDF:

\begin{lstlisting}
pandoc test.txt -o test.pdf
\end{lstlisting}

Production of a PDF requires that a LaTeX engine be installed (see
\lstinline!--latex-engine!, below), and assumes that the following LaTeX
packages are available: \lstinline!amssymb!, \lstinline!amsmath!,
\lstinline!ifxetex!, \lstinline!ifluatex!, \lstinline!listings! (if the
\lstinline!--listings! option is used), \lstinline!fancyvrb!,
\lstinline!longtable!, \lstinline!booktabs!, \lstinline!url!,
\lstinline!graphicx!, \lstinline!hyperref!, \lstinline!ulem!,
\lstinline!babel! (if the \lstinline!lang! variable is set),
\lstinline!fontspec! (if \lstinline!xelatex! or \lstinline!lualatex! is
used as the LaTeX engine), \lstinline!xltxtra! and \lstinline!xunicode!
(if \lstinline!xelatex! is used).

\section{\texorpdfstring{\lstinline!hsmarkdown!}{hsmarkdown}}\label{hsmarkdown}

A user who wants a drop-in replacement for \lstinline!Markdown.pl! may
create a symbolic link to the \lstinline!pandoc! executable called
\lstinline!hsmarkdown!. When invoked under the name
\lstinline!hsmarkdown!, \lstinline!pandoc! will behave as if invoked
with \lstinline!-f markdown_strict --email-obfuscation=references!, and
all command-line options will be treated as regular arguments. However,
this approach does not work under Cygwin, due to problems with its
simulation of symbolic links.

\chapter{Options}\label{options}

\section{General options}\label{general-options}

\begin{description}
\item[\lstinline!-f! \emph{FORMAT}, \lstinline!-r! \emph{FORMAT},
\lstinline!--from=!\emph{FORMAT}, \lstinline!--read=!\emph{FORMAT}]
Specify input format. \emph{FORMAT} can be \lstinline!native! (native
Haskell), \lstinline!json! (JSON version of native AST),
\lstinline!markdown! (pandoc's extended markdown),
\lstinline!markdown_strict! (original unextended markdown),
\lstinline!markdown_phpextra! (PHP Markdown Extra extended markdown),
\lstinline!markdown_github! (github extended markdown),
\lstinline!textile! (Textile), \lstinline!rst! (reStructuredText),
\lstinline!html! (HTML), \lstinline!docbook! (DocBook), \lstinline!t2t!
(txt2tags), \lstinline!docx! (docx), \lstinline!epub! (EPUB),
\lstinline!opml! (OPML), \lstinline!org! (Emacs Org-mode),
\lstinline!mediawiki! (MediaWiki markup), \lstinline!twiki! (TWiki
markup), \lstinline!haddock! (Haddock markup), or \lstinline!latex!
(LaTeX). If \lstinline!+lhs! is appended to \lstinline!markdown!,
\lstinline!rst!, \lstinline!latex!, or \lstinline!html!, the input will
be treated as literate Haskell source: see
\hyperref[literate-haskell-support]{Literate Haskell support}, below.
Markdown syntax extensions can be individually enabled or disabled by
appending \lstinline!+EXTENSION! or \lstinline!-EXTENSION! to the format
name. So, for example,
\lstinline!markdown_strict+footnotes+definition_lists! is strict
markdown with footnotes and definition lists enabled, and
\lstinline!markdown-pipe_tables+hard_line_breaks! is pandoc's markdown
without pipe tables and with hard line breaks. See
\hyperref[pandocs-markdown]{Pandoc's markdown}, below, for a list of
extensions and their names.
\item[\lstinline!-t! \emph{FORMAT}, \lstinline!-w! \emph{FORMAT},
\lstinline!--to=!\emph{FORMAT}, \lstinline!--write=!\emph{FORMAT}]
Specify output format. \emph{FORMAT} can be \lstinline!native! (native
Haskell), \lstinline!json! (JSON version of native AST),
\lstinline!plain! (plain text), \lstinline!markdown! (pandoc's extended
markdown), \lstinline!markdown_strict! (original unextended markdown),
\lstinline!markdown_phpextra! (PHP Markdown extra extended markdown),
\lstinline!markdown_github! (github extended markdown), \lstinline!rst!
(reStructuredText), \lstinline!html! (XHTML 1), \lstinline!html5! (HTML
5), \lstinline!latex! (LaTeX), \lstinline!beamer! (LaTeX beamer slide
show), \lstinline!context! (ConTeXt), \lstinline!man! (groff man),
\lstinline!mediawiki! (MediaWiki markup), \lstinline!dokuwiki! (DokuWiki
markup), \lstinline!textile! (Textile), \lstinline!org! (Emacs
Org-Mode), \lstinline!texinfo! (GNU Texinfo), \lstinline!opml! (OPML),
\lstinline!docbook! (DocBook), \lstinline!opendocument! (OpenDocument),
\lstinline!odt! (OpenOffice text document), \lstinline!docx! (Word
docx), \lstinline!haddock! (Haddock markup), \lstinline!rtf! (rich text
format), \lstinline!epub! (EPUB v2 book), \lstinline!epub3! (EPUB v3),
\lstinline!fb2! (FictionBook2 e-book), \lstinline!asciidoc! (AsciiDoc),
\lstinline!icml! (InDesign ICML), \lstinline!slidy! (Slidy HTML and
javascript slide show), \lstinline!slideous! (Slideous HTML and
javascript slide show), \lstinline!dzslides! (DZSlides HTML5 +
javascript slide show), \lstinline!revealjs! (reveal.js HTML5 +
javascript slide show), \lstinline!s5! (S5 HTML and javascript slide
show), or the path of a custom lua writer (see
\hyperref[custom-writers]{Custom writers}, below). Note that
\lstinline!odt!, \lstinline!epub!, and \lstinline!epub3! output will not
be directed to \emph{stdout}; an output filename must be specified using
the \lstinline!-o/--output! option. If \lstinline!+lhs! is appended to
\lstinline!markdown!, \lstinline!rst!, \lstinline!latex!,
\lstinline!beamer!, \lstinline!html!, or \lstinline!html5!, the output
will be rendered as literate Haskell source: see
\hyperref[literate-haskell-support]{Literate Haskell support}, below.
Markdown syntax extensions can be individually enabled or disabled by
appending \lstinline!+EXTENSION! or \lstinline!-EXTENSION! to the format
name, as described above under \lstinline!-f!.
\item[\lstinline!-o! \emph{FILE}, \lstinline!--output=!\emph{FILE}]
Write output to \emph{FILE} instead of \emph{stdout}. If \emph{FILE} is
\lstinline!-!, output will go to \emph{stdout}. (Exception: if the
output format is \lstinline!odt!, \lstinline!docx!, \lstinline!epub!, or
\lstinline!epub3!, output to stdout is disabled.)
\item[\lstinline!--data-dir=!\emph{DIRECTORY}]
Specify the user data directory to search for pandoc data files. If this
option is not specified, the default user data directory will be used.
This is

\begin{lstlisting}
$HOME/.pandoc
\end{lstlisting}

in unix,

\begin{lstlisting}
C:\Documents And Settings\USERNAME\Application Data\pandoc
\end{lstlisting}

in Windows XP, and

\begin{lstlisting}
C:\Users\USERNAME\AppData\Roaming\pandoc
\end{lstlisting}

in Windows 7. (You can find the default user data directory on your
system by looking at the output of \lstinline!pandoc --version!.) A
\lstinline!reference.odt!, \lstinline!reference.docx!,
\lstinline!default.csl!, \lstinline!epub.css!, \lstinline!templates!,
\lstinline!slidy!, \lstinline!slideous!, or \lstinline!s5! directory
placed in this directory will override pandoc's normal defaults.
\item[\lstinline!-v!, \lstinline!--version!]
Print version.
\item[\lstinline!-h!, \lstinline!--help!]
Show usage message.
\end{description}

\section{Reader options}\label{reader-options}

\begin{description}
\item[\lstinline!-R!, \lstinline!--parse-raw!]
Parse untranslatable HTML codes and LaTeX environments as raw HTML or
LaTeX, instead of ignoring them. Affects only HTML and LaTeX input. Raw
HTML can be printed in markdown, reStructuredText, HTML, Slidy,
Slideous, DZSlides, reveal.js, and S5 output; raw LaTeX can be printed
in markdown, reStructuredText, LaTeX, and ConTeXt output. The default is
for the readers to omit untranslatable HTML codes and LaTeX
environments. (The LaTeX reader does pass through untranslatable LaTeX
\emph{commands}, even if \lstinline!-R! is not specified.)
\item[\lstinline!-S!, \lstinline!--smart!]
Produce typographically correct output, converting straight quotes to
curly quotes, \lstinline!---! to em-dashes, \lstinline!--! to en-dashes,
and \lstinline!...! to ellipses. Nonbreaking spaces are inserted after
certain abbreviations, such as ``Mr.'' (Note: This option is significant
only when the input format is \lstinline!markdown!,
\lstinline!markdown_strict!, \lstinline!textile! or \lstinline!twiki!.
It is selected automatically when the input format is
\lstinline!textile! or the output format is \lstinline!latex! or
\lstinline!context!, unless \lstinline!--no-tex-ligatures! is used.)
\item[\lstinline!--old-dashes!]
Selects the pandoc \textless{}= 1.8.2.1 behavior for parsing smart
dashes: \lstinline!-! before a numeral is an en-dash, and \lstinline!--!
is an em-dash. This option is selected automatically for
\lstinline!textile! input.
\item[\lstinline!--base-header-level=!\emph{NUMBER}]
Specify the base level for headers (defaults to 1).
\item[\lstinline!--indented-code-classes=!\emph{CLASSES}]
Specify classes to use for indented code blocks--for example,
\lstinline!perl,numberLines! or \lstinline!haskell!. Multiple classes
may be separated by spaces or commas.
\item[\lstinline!--default-image-extension=!\emph{EXTENSION}]
Specify a default extension to use when image paths/URLs have no
extension. This allows you to use the same source for formats that
require different kinds of images. Currently this option only affects
the markdown and LaTeX readers.
\item[\lstinline!--filter=!\emph{EXECUTABLE}]
Specify an executable to be used as a filter transforming the Pandoc AST
after the input is parsed and before the output is written. The
executable should read JSON from stdin and write JSON to stdout. The
JSON must be formatted like pandoc's own JSON input and output. The name
of the output format will be passed to the filter as the first argument.
Hence,

\begin{lstlisting}
pandoc --filter ./caps.py -t latex
\end{lstlisting}

is equivalent to

\begin{lstlisting}
pandoc -t json | ./caps.py latex | pandoc -f json -t latex
\end{lstlisting}

The latter form may be useful for debugging filters.

Filters may be written in any language. \lstinline!Text.Pandoc.JSON!
exports \lstinline!toJSONFilter! to facilitate writing filters in
Haskell. Those who would prefer to write filters in python can use the
module \lstinline!pandocfilters!, installable from PyPI. See
\url{http://github.com/jgm/pandocfilters} for the module and several
examples. Note that the \emph{EXECUTABLE} will be sought in the user's
\lstinline!PATH!, and not in the working directory, if no directory is
provided. If you want to run a script in the working directory, preface
the filename with \lstinline!./!.
\item[\lstinline!-M! \emph{KEY{[}=VAL{]}},
\lstinline!--metadata=!\emph{KEY{[}:VAL{]}}]
Set the metadata field \emph{KEY} to the value \emph{VAL}. A value
specified on the command line overrides a value specified in the
document. Values will be parsed as YAML boolean or string values. If no
value is specified, the value will be treated as Boolean true. Like
\lstinline!--variable!, \lstinline!--metadata! causes template variables
to be set. But unlike \lstinline!--variable!, \lstinline!--metadata!
affects the metadata of the underlying document (which is accessible
from filters and may be printed in some output formats).
\item[\lstinline!--normalize!]
Normalize the document after reading: merge adjacent \lstinline!Str! or
\lstinline!Emph! elements, for example, and remove repeated
\lstinline!Space!s.
\item[\lstinline!-p!, \lstinline!--preserve-tabs!]
Preserve tabs instead of converting them to spaces (the default). Note
that this will only affect tabs in literal code spans and code blocks;
tabs in regular text will be treated as spaces.
\item[\lstinline!--tab-stop=!\emph{NUMBER}]
Specify the number of spaces per tab (default is 4).
\item[\lstinline!--track-changes=!\emph{accept\textbar{}reject\textbar{}all}]
Specifies what to do with insertions and deletions produced by the MS
Word ``track-changes'' feature. \emph{accept} (the default), inserts all
insertions, and ignores all deletions. \emph{reject} inserts all
deletions and ignores insertions. \emph{all} puts in both insertions and
deletions, wrapped in spans with \lstinline!insertion! and
\lstinline!deletion! classes, respectively. The author and time of
change is included. \emph{all} is useful for scripting: only accepting
changes from a certain reviewer, say, or before a certain date. This
option only affects the docx reader.
\item[\lstinline!--extract-media=!\emph{DIR}]
Extract images and other media contained in a docx or epub container to
the path \emph{DIR}, creating it if necessary, and adjust the images
references in the document so they point to the extracted files. This
option only affects the docx and epub readers.
\end{description}

\section{General writer options}\label{general-writer-options}

\begin{description}
\itemsep1pt\parskip0pt\parsep0pt
\item[\lstinline!-s!, \lstinline!--standalone!]
Produce output with an appropriate header and footer (e.g.~a standalone
HTML, LaTeX, or RTF file, not a fragment). This option is set
automatically for \lstinline!pdf!, \lstinline!epub!, \lstinline!epub3!,
\lstinline!fb2!, \lstinline!docx!, and \lstinline!odt! output.
\item[\lstinline!--template=!\emph{FILE}]
Use \emph{FILE} as a custom template for the generated document. Implies
\lstinline!--standalone!. See \hyperref[templates]{Templates} below for
a description of template syntax. If no extension is specified, an
extension corresponding to the writer will be added, so that
\lstinline!--template=special! looks for \lstinline!special.html! for
HTML output. If the template is not found, pandoc will search for it in
the user data directory (see \lstinline!--data-dir!). If this option is
not used, a default template appropriate for the output format will be
used (see \lstinline!-D/--print-default-template!).
\item[\lstinline!-V! \emph{KEY{[}=VAL{]}},
\lstinline!--variable=!\emph{KEY{[}:VAL{]}}]
Set the template variable \emph{KEY} to the value \emph{VAL} when
rendering the document in standalone mode. This is generally only useful
when the \lstinline!--template! option is used to specify a custom
template, since pandoc automatically sets the variables used in the
default templates. If no \emph{VAL} is specified, the key will be given
the value \lstinline!true!.
\item[\lstinline!-D! \emph{FORMAT},
\lstinline!--print-default-template=!\emph{FORMAT}]
Print the default template for an output \emph{FORMAT}. (See
\lstinline!-t! for a list of possible \emph{FORMAT}s.)
\item[\lstinline!--print-default-data-file=!\emph{FILE}]
Print a default data file.
\item[\lstinline!--no-wrap!]
Disable text wrapping in output. By default, text is wrapped
appropriately for the output format.
\item[\lstinline!--columns!=\emph{NUMBER}]
Specify length of lines in characters (for text wrapping).
\item[\lstinline!--toc!, \lstinline!--table-of-contents!]
Include an automatically generated table of contents (or, in the case of
\lstinline!latex!, \lstinline!context!, and \lstinline!rst!, an
instruction to create one) in the output document. This option has no
effect on \lstinline!man!, \lstinline!docbook!, \lstinline!slidy!,
\lstinline!slideous!, \lstinline!s5!, \lstinline!docx!, or
\lstinline!odt! output.
\item[\lstinline!--toc-depth=!\emph{NUMBER}]
Specify the number of section levels to include in the table of
contents. The default is 3 (which means that level 1, 2, and 3 headers
will be listed in the contents).
\item[\lstinline!--no-highlight!]
Disables syntax highlighting for code blocks and inlines, even when a
language attribute is given.
\item[\lstinline!--highlight-style!=\emph{STYLE}]
Specifies the coloring style to be used in highlighted source code.
Options are \lstinline!pygments! (the default), \lstinline!kate!,
\lstinline!monochrome!, \lstinline!espresso!, \lstinline!zenburn!,
\lstinline!haddock!, and \lstinline!tango!.
\item[\lstinline!-H! \emph{FILE},
\lstinline!--include-in-header=!\emph{FILE}]
Include contents of \emph{FILE}, verbatim, at the end of the header.
This can be used, for example, to include special CSS or javascript in
HTML documents. This option can be used repeatedly to include multiple
files in the header. They will be included in the order specified.
Implies \lstinline!--standalone!.
\item[\lstinline!-B! \emph{FILE},
\lstinline!--include-before-body=!\emph{FILE}]
Include contents of \emph{FILE}, verbatim, at the beginning of the
document body (e.g.~after the \lstinline!<body>! tag in HTML, or the
\lstinline!\begin{document}! command in LaTeX). This can be used to
include navigation bars or banners in HTML documents. This option can be
used repeatedly to include multiple files. They will be included in the
order specified. Implies \lstinline!--standalone!.
\item[\lstinline!-A! \emph{FILE},
\lstinline!--include-after-body=!\emph{FILE}]
Include contents of \emph{FILE}, verbatim, at the end of the document
body (before the \lstinline!</body>! tag in HTML, or the
\lstinline!\end{document}! command in LaTeX). This option can be be used
repeatedly to include multiple files. They will be included in the order
specified. Implies \lstinline!--standalone!.
\end{description}

\section{Options affecting specific
writers}\label{options-affecting-specific-writers}

\begin{description}
\item[\lstinline!--self-contained!]
Produce a standalone HTML file with no external dependencies, using
\lstinline!data:! URIs to incorporate the contents of linked scripts,
stylesheets, images, and videos. The resulting file should be
``self-contained,'' in the sense that it needs no external files and no
net access to be displayed properly by a browser. This option works only
with HTML output formats, including \lstinline!html!, \lstinline!html5!,
\lstinline!html+lhs!, \lstinline!html5+lhs!, \lstinline!s5!,
\lstinline!slidy!, \lstinline!slideous!, \lstinline!dzslides!, and
\lstinline!revealjs!. Scripts, images, and stylesheets at absolute URLs
will be downloaded; those at relative URLs will be sought relative to
the working directory (if the first source file is local) or relative to
the base URL (if the first source file is remote).
\lstinline!--self-contained! does not work with \lstinline!--mathjax!.
\item[\lstinline!--offline!]
Deprecated synonym for \lstinline!--self-contained!.
\item[\lstinline!-5!, \lstinline!--html5!]
Produce HTML5 instead of HTML4. This option has no effect for writers
other than \lstinline!html!. (\emph{Deprecated:} Use the
\lstinline!html5! output format instead.)
\item[\lstinline!--html-q-tags!]
Use \lstinline!<q>! tags for quotes in HTML.
\item[\lstinline!--ascii!]
Use only ascii characters in output. Currently supported only for HTML
output (which uses numerical entities instead of UTF-8 when this option
is selected).
\item[\lstinline!--reference-links!]
Use reference-style links, rather than inline links, in writing markdown
or reStructuredText. By default inline links are used.
\item[\lstinline!--atx-headers!]
Use ATX style headers in markdown and asciidoc output. The default is to
use setext-style headers for levels 1-2, and then ATX headers.
\item[\lstinline!--chapters!]
Treat top-level headers as chapters in LaTeX, ConTeXt, and DocBook
output. When the LaTeX template uses the report, book, or memoir class,
this option is implied. If \lstinline!beamer! is the output format,
top-level headers will become \lstinline!\part{..}!.
\item[\lstinline!-N!, \lstinline!--number-sections!]
Number section headings in LaTeX, ConTeXt, HTML, or EPUB output. By
default, sections are not numbered. Sections with class
\lstinline!unnumbered! will never be numbered, even if
\lstinline!--number-sections! is specified.
\item[\lstinline!--number-offset!=\emph{NUMBER{[},NUMBER,\ldots{}{]}},]
Offset for section headings in HTML output (ignored in other output
formats). The first number is added to the section number for top-level
headers, the second for second-level headers, and so on. So, for
example, if you want the first top-level header in your document to be
numbered ``6'', specify \lstinline!--number-offset=5!. If your document
starts with a level-2 header which you want to be numbered ``1.5'',
specify \lstinline!--number-offset=1,4!. Offsets are 0 by default.
Implies \lstinline!--number-sections!.
\item[\lstinline!--no-tex-ligatures!]
Do not convert quotation marks, apostrophes, and dashes to the TeX
ligatures when writing LaTeX or ConTeXt. Instead, just use literal
unicode characters. This is needed for using advanced OpenType features
with XeLaTeX and LuaLaTeX. Note: normally \lstinline!--smart! is
selected automatically for LaTeX and ConTeXt output, but it must be
specified explicitly if \lstinline!--no-tex-ligatures! is selected. If
you use literal curly quotes, dashes, and ellipses in your source, then
you may want to use \lstinline!--no-tex-ligatures! without
\lstinline!--smart!.
\item[\lstinline!--listings!]
Use listings package for LaTeX code blocks
\item[\lstinline!-i!, \lstinline!--incremental!]
Make list items in slide shows display incrementally (one by one). The
default is for lists to be displayed all at once.
\item[\lstinline!--slide-level!=\emph{NUMBER}]
Specifies that headers with the specified level create slides (for
\lstinline!beamer!, \lstinline!s5!, \lstinline!slidy!,
\lstinline!slideous!, \lstinline!dzslides!). Headers above this level in
the hierarchy are used to divide the slide show into sections; headers
below this level create subheads within a slide. The default is to set
the slide level based on the contents of the document; see
\hyperref[structuring-the-slide-show]{Structuring the slide show},
below.
\item[\lstinline!--section-divs!]
Wrap sections in \lstinline!<div>! tags (or \lstinline!<section>! tags
in HTML5), and attach identifiers to the enclosing \lstinline!<div>! (or
\lstinline!<section>!) rather than the header itself. See
\hyperref[header-identifiers-in-html-latex-and-context]{Section
identifiers}, below.
\item[\lstinline!--email-obfuscation=!\emph{none\textbar{}javascript\textbar{}references}]
Specify a method for obfuscating \lstinline!mailto:! links in HTML
documents. \emph{none} leaves \lstinline!mailto:! links as they are.
\emph{javascript} obfuscates them using javascript. \emph{references}
obfuscates them by printing their letters as decimal or hexadecimal
character references.
\item[\lstinline!--id-prefix!=\emph{STRING}]
Specify a prefix to be added to all automatically generated identifiers
in HTML and DocBook output, and to footnote numbers in markdown output.
This is useful for preventing duplicate identifiers when generating
fragments to be included in other pages.
\item[\lstinline!-T! \emph{STRING},
\lstinline!--title-prefix=!\emph{STRING}]
Specify \emph{STRING} as a prefix at the beginning of the title that
appears in the HTML header (but not in the title as it appears at the
beginning of the HTML body). Implies \lstinline!--standalone!.
\item[\lstinline!-c! \emph{URL}, \lstinline!--css=!\emph{URL}]
Link to a CSS style sheet. This option can be be used repeatedly to
include multiple files. They will be included in the order specified.
\item[\lstinline!--reference-odt=!\emph{FILE}]
Use the specified file as a style reference in producing an ODT. For
best results, the reference ODT should be a modified version of an ODT
produced using pandoc. The contents of the reference ODT are ignored,
but its stylesheets are used in the new ODT. If no reference ODT is
specified on the command line, pandoc will look for a file
\lstinline!reference.odt! in the user data directory (see
\lstinline!--data-dir!). If this is not found either, sensible defaults
will be used.
\item[\lstinline!--reference-docx=!\emph{FILE}]
Use the specified file as a style reference in producing a docx file.
For best results, the reference docx should be a modified version of a
docx file produced using pandoc. The contents of the reference docx are
ignored, but its stylesheets and document properties (including margins,
page size, header, and footer) are used in the new docx. If no reference
docx is specified on the command line, pandoc will look for a file
\lstinline!reference.docx! in the user data directory (see
\lstinline!--data-dir!). If this is not found either, sensible defaults
will be used. The following styles are used by pandoc: {[}paragraph{]}
Normal, Compact, Title, Subtitle, Authors, Date, Abstract, Heading 1,
Heading 2, Heading 3, Heading 4, Heading 5, Block Quote, Definition
Term, Definition, Bibliography, Body Text, Table Caption, Image Caption;
{[}character{]} Default Paragraph Font, Body Text Char, Verbatim Char,
Footnote Ref, Link.
\item[\lstinline!--epub-stylesheet=!\emph{FILE}]
Use the specified CSS file to style the EPUB. If no stylesheet is
specified, pandoc will look for a file \lstinline!epub.css! in the user
data directory (see \lstinline!--data-dir!). If it is not found there,
sensible defaults will be used.
\item[\lstinline!--epub-cover-image=!\emph{FILE}]
Use the specified image as the EPUB cover. It is recommended that the
image be less than 1000px in width and height. Note that in a markdown
source document you can also specify \lstinline!cover-image! in a YAML
metadata block (see \hyperref[epub-metadata]{EPUB Metadata}, below).
\item[\lstinline!--epub-metadata=!\emph{FILE}]
Look in the specified XML file for metadata for the EPUB. The file
should contain a series of Dublin Core elements, as documented at
\url{http://dublincore.org/documents/dces/}. For example:

\begin{lstlisting}
 <dc:rights>Creative Commons</dc:rights>
 <dc:language>es-AR</dc:language>
\end{lstlisting}

By default, pandoc will include the following metadata elements:
\lstinline!<dc:title>! (from the document title),
\lstinline!<dc:creator>! (from the document authors),
\lstinline!<dc:date>! (from the document date, which should be in
\href{http://www.w3.org/TR/NOTE-datetime}{ISO 8601 format}),
\lstinline!<dc:language>! (from the \lstinline!lang! variable, or, if is
not set, the locale), and \lstinline!<dc:identifier id="BookId">! (a
randomly generated UUID). Any of these may be overridden by elements in
the metadata file.

Note: if the source document is markdown, a YAML metadata block in the
document can be used instead. See below under
\hyperref[epub-metadata]{EPUB Metadata}.
\item[\lstinline!--epub-embed-font=!\emph{FILE}]
Embed the specified font in the EPUB. This option can be repeated to
embed multiple fonts. To use embedded fonts, you will need to add
declarations like the following to your CSS (see
\lstinline!--epub-stylesheet!):

\begin{lstlisting}
@font-face {
font-family: DejaVuSans;
font-style: normal;
font-weight: normal;
src:url("DejaVuSans-Regular.ttf");
}
@font-face {
font-family: DejaVuSans;
font-style: normal;
font-weight: bold;
src:url("DejaVuSans-Bold.ttf");
}
@font-face {
font-family: DejaVuSans;
font-style: italic;
font-weight: normal;
src:url("DejaVuSans-Oblique.ttf");
}
@font-face {
font-family: DejaVuSans;
font-style: italic;
font-weight: bold;
src:url("DejaVuSans-BoldOblique.ttf");
}
body { font-family: "DejaVuSans"; }
\end{lstlisting}
\item[\lstinline!--epub-chapter-level=!\emph{NUMBER}]
Specify the header level at which to split the EPUB into separate
``chapter'' files. The default is to split into chapters at level 1
headers. This option only affects the internal composition of the EPUB,
not the way chapters and sections are displayed to users. Some readers
may be slow if the chapter files are too large, so for large documents
with few level 1 headers, one might want to use a chapter level of 2 or
3.
\item[\lstinline!--latex-engine=!\emph{pdflatex\textbar{}lualatex\textbar{}xelatex}]
Use the specified LaTeX engine when producing PDF output. The default is
\lstinline!pdflatex!. If the engine is not in your PATH, the full path
of the engine may be specified here.
\end{description}

\section{Citation rendering}\label{citation-rendering}

\begin{description}
\itemsep1pt\parskip0pt\parsep0pt
\item[\lstinline!--bibliography=!\emph{FILE}]
Set the \lstinline!bibliography! field in the document's metadata to
\emph{FILE}, overriding any value set in the metadata, and process
citations using \lstinline!pandoc-citeproc!. (This is equivalent to
\lstinline!--metadata bibliography=FILE --filter pandoc-citeproc!.)
\item[\lstinline!--csl=!\emph{FILE}]
Set the \lstinline!csl! field in the document's metadata to \emph{FILE},
overriding any value set in the metadata. (This is equivalent to
\lstinline!--metadata csl=FILE!.)
\item[\lstinline!--citation-abbreviations=!\emph{FILE}]
Set the \lstinline!citation-abbreviations! field in the document's
metadata to \emph{FILE}, overriding any value set in the metadata. (This
is equivalent to \lstinline!--metadata citation-abbreviations=FILE!.)
\item[\lstinline!--natbib!]
Use natbib for citations in LaTeX output. This option is not for use
with the \lstinline!pandoc-citeproc! filter or with PDF output. It is
intended for use in producing a LaTeX file that can be processed with
pdflatex and bibtex.
\item[\lstinline!--biblatex!]
Use biblatex for citations in LaTeX output. This option is not for use
with the \lstinline!pandoc-citeproc! filter or with PDF output. It is
intended for use in producing a LaTeX file that can be processed with
pdflatex and bibtex or biber.
\end{description}

\section{Math rendering in HTML}\label{math-rendering-in-html}

\begin{description}
\itemsep1pt\parskip0pt\parsep0pt
\item[\lstinline!-m! {[}\emph{URL}{]},
\lstinline!--latexmathml!{[}=\emph{URL}{]}]
Use the \href{http://math.etsu.edu/LaTeXMathML/}{LaTeXMathML} script to
display embedded TeX math in HTML output. To insert a link to a local
copy of the \lstinline!LaTeXMathML.js! script, provide a \emph{URL}. If
no \emph{URL} is provided, the contents of the script will be inserted
directly into the HTML header, preserving portability at the price of
efficiency. If you plan to use math on several pages, it is much better
to link to a copy of the script, so it can be cached.
\item[\lstinline!--mathml!{[}=\emph{URL}{]}]
Convert TeX math to MathML (in \lstinline!docbook! as well as
\lstinline!html! and \lstinline!html5!). In standalone \lstinline!html!
output, a small javascript (or a link to such a script if a \emph{URL}
is supplied) will be inserted that allows the MathML to be viewed on
some browsers.
\item[\lstinline!--jsmath!{[}=\emph{URL}{]}]
Use \href{http://www.math.union.edu/~dpvc/jsmath/}{jsMath} to display
embedded TeX math in HTML output. The \emph{URL} should point to the
jsMath load script (e.g. \lstinline!jsMath/easy/load.js!); if provided,
it will be linked to in the header of standalone HTML documents. If a
\emph{URL} is not provided, no link to the jsMath load script will be
inserted; it is then up to the author to provide such a link in the HTML
template.
\item[\lstinline!--mathjax!{[}=\emph{URL}{]}]
Use \href{http://www.mathjax.org/}{MathJax} to display embedded TeX math
in HTML output. The \emph{URL} should point to the
\lstinline!MathJax.js! load script. If a \emph{URL} is not provided, a
link to the MathJax CDN will be inserted.
\item[\lstinline!--gladtex!]
Enclose TeX math in \lstinline!<eq>! tags in HTML output. These can then
be processed by \href{http://ans.hsh.no/home/mgg/gladtex/}{gladTeX} to
produce links to images of the typeset formulas.
\item[\lstinline!--mimetex!{[}=\emph{URL}{]}]
Render TeX math using the
\href{http://www.forkosh.com/mimetex.html}{mimeTeX} CGI script. If
\emph{URL} is not specified, it is assumed that the script is at
\lstinline!/cgi-bin/mimetex.cgi!.
\item[\lstinline!--webtex!{[}=\emph{URL}{]}]
Render TeX formulas using an external script that converts TeX formulas
to images. The formula will be concatenated with the URL provided. If
\emph{URL} is not specified, the Google Chart API will be used.
\end{description}

\lstinline!--katex!{[}=\emph{URL}{]} : Use
\href{https://github.com/Khan/KaTeX}{KaTeX} to display embedded TeX math
in HTML output. The \emph{URL} should point to the \lstinline!katex.js!
load script. If a \emph{URL} is not provided, a link to the KaTeX CDN
will be inserted.

\lstinline!--katex-stylesheet=*URL*! : The \emph{URL} should point to
the \lstinline!katex.css! stylesheet. If this option is not specified, a
link to the KaTeX CDN will be inserted. Note that this option does not
imply \lstinline!--katex!.

\section{Options for wrapper scripts}\label{options-for-wrapper-scripts}

\begin{description}
\item[\lstinline!--dump-args!]
Print information about command-line arguments to \emph{stdout}, then
exit. This option is intended primarily for use in wrapper scripts. The
first line of output contains the name of the output file specified with
the \lstinline!-o! option, or \lstinline!-! (for \emph{stdout}) if no
output file was specified. The remaining lines contain the command-line
arguments, one per line, in the order they appear. These do not include
regular Pandoc options and their arguments, but do include any options
appearing after a \lstinline!--! separator at the end of the line.
\item[\lstinline!--ignore-args!]
Ignore command-line arguments (for use in wrapper scripts). Regular
Pandoc options are not ignored. Thus, for example,

\begin{lstlisting}
pandoc --ignore-args -o foo.html -s foo.txt -- -e latin1
\end{lstlisting}

is equivalent to

\begin{lstlisting}
pandoc -o foo.html -s
\end{lstlisting}
\end{description}

\hyperdef{}{templates}{\chapter{Templates}\label{templates}}

When the \lstinline!-s/--standalone! option is used, pandoc uses a
template to add header and footer material that is needed for a
self-standing document. To see the default template that is used, just
type

\begin{lstlisting}
pandoc -D FORMAT
\end{lstlisting}

where \lstinline!FORMAT! is the name of the output format. A custom
template can be specified using the \lstinline!--template! option. You
can also override the system default templates for a given output format
\lstinline!FORMAT! by putting a file
\lstinline!templates/default.FORMAT! in the user data directory (see
\lstinline!--data-dir!, above). \emph{Exceptions:} For \lstinline!odt!
output, customize the \lstinline!default.opendocument! template. For
\lstinline!pdf! output, customize the \lstinline!default.latex!
template.

Templates may contain \emph{variables}. Variable names are sequences of
alphanumerics, \lstinline!-!, and \lstinline!_!, starting with a letter.
A variable name surrounded by \lstinline!$! signs will be replaced by
its value. For example, the string \lstinline!$title$! in

\begin{lstlisting}
<title>$title$</title>
\end{lstlisting}

will be replaced by the document title.

To write a literal \lstinline!$! in a template, use \lstinline!$$!.

Some variables are set automatically by pandoc. These vary somewhat
depending on the output format, but include metadata fields (such as
\lstinline!title!, \lstinline!author!, and \lstinline!date!) as well as
the following:

\begin{description}
\itemsep1pt\parskip0pt\parsep0pt
\item[\lstinline!header-includes!]
contents specified by \lstinline!-H/--include-in-header! (may have
multiple values)
\item[\lstinline!toc!]
non-null value if \lstinline!--toc/--table-of-contents! was specified
\item[\lstinline!include-before!]
contents specified by \lstinline!-B/--include-before-body! (may have
multiple values)
\item[\lstinline!include-after!]
contents specified by \lstinline!-A/--include-after-body! (may have
multiple values)
\item[\lstinline!body!]
body of document
\item[\lstinline!lang!]
language code for HTML or LaTeX documents
\item[\lstinline!slidy-url!]
base URL for Slidy documents (defaults to
\lstinline!http://www.w3.org/Talks/Tools/Slidy2!)
\item[\lstinline!slideous-url!]
base URL for Slideous documents (defaults to \lstinline!slideous!)
\item[\lstinline!s5-url!]
base URL for S5 documents (defaults to \lstinline!s5/default!)
\item[\lstinline!revealjs-url!]
base URL for reveal.js documents (defaults to \lstinline!reveal.js!)
\item[\lstinline!theme!]
reveal.js or LaTeX beamer theme
\item[\lstinline!transition!]
reveal.js transition
\item[\lstinline!fontsize!]
font size (10pt, 11pt, 12pt) for LaTeX documents
\item[\lstinline!documentclass!]
document class for LaTeX documents
\item[\lstinline!classoption!]
option for LaTeX documentclass, e.g. \lstinline!oneside!; may be
repeated for multiple options
\item[\lstinline!geometry!]
options for LaTeX \lstinline!geometry! class, e.g.
\lstinline!margin=1in!; may be repeated for multiple options
\item[\lstinline!linestretch!]
adjusts line spacing (requires the \lstinline!setspace! package)
\item[\lstinline!fontfamily!]
font package to use for LaTeX documents (with pdflatex): TeXLive has
\lstinline!bookman! (Bookman), \lstinline!utopia! or \lstinline!fourier!
(Utopia), \lstinline!fouriernc! (New Century Schoolbook),
\lstinline!times! or \lstinline!txfonts! (Times), \lstinline!mathpazo!
or \lstinline!pxfonts! or \lstinline!mathpple! (Palatino),
\lstinline!libertine! (Linux Libertine), \lstinline!arev! (Arev Sans),
and the default \lstinline!lmodern!, among others.
\item[\lstinline!mainfont!, \lstinline!sansfont!, \lstinline!monofont!,
\lstinline!mathfont!]
fonts for LaTeX documents (works only with xelatex and lualatex)
\item[\lstinline!colortheme!]
colortheme for LaTeX beamer documents
\item[\lstinline!fonttheme!]
fonttheme for LaTeX beamer documents
\item[\lstinline!linkcolor!]
color for internal links in LaTeX documents (\lstinline!red!,
\lstinline!green!, \lstinline!magenta!, \lstinline!cyan!,
\lstinline!blue!, \lstinline!black!)
\item[\lstinline!urlcolor!]
color for external links in LaTeX documents
\item[\lstinline!citecolor!]
color for citation links in LaTeX documents
\item[\lstinline!links-as-notes!]
causes links to be printed as footnotes in LaTeX documents
\item[\lstinline!toc!]
include table of contents in LaTeX documents
\item[\lstinline!toc-depth!]
level of section to include in table of contents in LaTeX documents
\item[\lstinline!lof!]
include list of figures in LaTeX documents
\item[\lstinline!lot!]
include list of tables in LaTeX documents
\item[\lstinline!biblio-style!]
bibliography style in LaTeX, when used with \lstinline!--natbib!
\item[\lstinline!biblio-files!]
bibliography files to use in LaTeX, with \lstinline!--natbib! or
\lstinline!--biblatex!
\item[\lstinline!section!]
section number in man pages
\item[\lstinline!header!]
header in man pages
\item[\lstinline!footer!]
footer in man pages
\end{description}

Variables may be set at the command line using the
\lstinline!-V/--variable! option. Variables set in this way override
metadata fields with the same name.

Templates may contain conditionals. The syntax is as follows:

\begin{lstlisting}
$if(variable)$
X
$else$
Y
$endif$
\end{lstlisting}

This will include \lstinline!X! in the template if \lstinline!variable!
has a non-null value; otherwise it will include \lstinline!Y!.
\lstinline!X! and \lstinline!Y! are placeholders for any valid template
text, and may include interpolated variables or other conditionals. The
\lstinline!$else$! section may be omitted.

When variables can have multiple values (for example, \lstinline!author!
in a multi-author document), you can use the \lstinline!$for$! keyword:

\begin{lstlisting}
$for(author)$
<meta name="author" content="$author$" />
$endfor$
\end{lstlisting}

You can optionally specify a separator to be used between consecutive
items:

\begin{lstlisting}
$for(author)$$author$$sep$, $endfor$
\end{lstlisting}

A dot can be used to select a field of a variable that takes an object
as its value. So, for example:

\begin{lstlisting}
$author.name$ ($author.affiliation$)
\end{lstlisting}

If you use custom templates, you may need to revise them as pandoc
changes. We recommend tracking the changes in the default templates, and
modifying your custom templates accordingly. An easy way to do this is
to fork the pandoc-templates repository
(\url{http://github.com/jgm/pandoc-templates}) and merge in changes
after each pandoc release.

\hyperdef{}{pandocs-markdown}{\chapter{Pandoc's
markdown}\label{pandocs-markdown}}

Pandoc understands an extended and slightly revised version of John
Gruber's \href{http://daringfireball.net/projects/markdown/}{markdown}
syntax. This document explains the syntax, noting differences from
standard markdown. Except where noted, these differences can be
suppressed by using the \lstinline!markdown_strict! format instead of
\lstinline!markdown!. An extensions can be enabled by adding
\lstinline!+EXTENSION! to the format name and disabled by adding
\lstinline!-EXTENSION!. For example,
\lstinline!markdown_strict+footnotes! is strict markdown with footnotes
enabled, while \lstinline!markdown-footnotes-pipe_tables! is pandoc's
markdown without footnotes or pipe tables.

\section{Philosophy}\label{philosophy}

Markdown is designed to be easy to write, and, even more importantly,
easy to read:

\begin{quote}
A Markdown-formatted document should be publishable as-is, as plain
text, without looking like it's been marked up with tags or formatting
instructions. --
\href{http://daringfireball.net/projects/markdown/syntax\#philosophy}{John
Gruber}
\end{quote}

This principle has guided pandoc's decisions in finding syntax for
tables, footnotes, and other extensions.

There is, however, one respect in which pandoc's aims are different from
the original aims of markdown. Whereas markdown was originally designed
with HTML generation in mind, pandoc is designed for multiple output
formats. Thus, while pandoc allows the embedding of raw HTML, it
discourages it, and provides other, non-HTMLish ways of representing
important document elements like definition lists, tables, mathematics,
and footnotes.

\section{Paragraphs}\label{paragraphs}

A paragraph is one or more lines of text followed by one or more blank
line. Newlines are treated as spaces, so you can reflow your paragraphs
as you like. If you need a hard line break, put two or more spaces at
the end of a line.

\subsubsection{\texorpdfstring{Extension:
\lstinline!escaped_line_breaks!}{Extension: escaped\_line\_breaks}}\label{extension-escapedux5flineux5fbreaks}

A backslash followed by a newline is also a hard line break. Note: in
multiline and grid table cells, this is the only way to create a hard
line break, since trailing spaces in the cells are ignored.

\section{Headers}\label{headers}

There are two kinds of headers, Setext and atx.

\subsection{Setext-style headers}\label{setext-style-headers}

A setext-style header is a line of text ``underlined'' with a row of
\lstinline!=! signs (for a level one header) or \lstinline!-! signs (for
a level two header):

\begin{lstlisting}
A level-one header
==================

A level-two header
------------------
\end{lstlisting}

The header text can contain inline formatting, such as emphasis (see
\hyperref[inline-formatting]{Inline formatting}, below).

\subsection{Atx-style headers}\label{atx-style-headers}

An Atx-style header consists of one to six \lstinline!#! signs and a
line of text, optionally followed by any number of \lstinline!#! signs.
The number of \lstinline!#! signs at the beginning of the line is the
header level:

\begin{lstlisting}
## A level-two header

### A level-three header ###
\end{lstlisting}

As with setext-style headers, the header text can contain formatting:

\begin{lstlisting}
# A level-one header with a [link](/url) and *emphasis*
\end{lstlisting}

\subsubsection{\texorpdfstring{Extension:
\lstinline!blank_before_header!}{Extension: blank\_before\_header}}\label{extension-blankux5fbeforeux5fheader}

Standard markdown syntax does not require a blank line before a header.
Pandoc does require this (except, of course, at the beginning of the
document). The reason for the requirement is that it is all too easy for
a \lstinline!#! to end up at the beginning of a line by accident
(perhaps through line wrapping). Consider, for example:

\begin{lstlisting}
I like several of their flavors of ice cream:
#22, for example, and #5.
\end{lstlisting}

\hyperdef{}{header-identifiers-in-html-latex-and-context}{\subsection{Header
identifiers in HTML, LaTeX, and
ConTeXt}\label{header-identifiers-in-html-latex-and-context}}

\subsubsection{\texorpdfstring{Extension:
\lstinline!header_attributes!}{Extension: header\_attributes}}\label{extension-headerux5fattributes}

Headers can be assigned attributes using this syntax at the end of the
line containing the header text:

\begin{lstlisting}
{#identifier .class .class key=value key=value}
\end{lstlisting}

Thus, for example, the following headers will all be assigned the
identifier \lstinline!foo!:

\begin{lstlisting}
# My header {#foo}

## My header ##    {#foo}

My other header   {#foo}
---------------
\end{lstlisting}

(This syntax is compatible with
\href{http://www.michelf.com/projects/php-markdown/extra/}{PHP Markdown
Extra}.)

Note that although this syntax allows assignment of classes and
key/value attributes, writers generally don't use all of this
information. Identifiers, classes, and key/value attributes are used in
HTML and HTML-based formats such as EPUB and slidy. Identifiers are used
for labels and link anchors in the LaTeX, ConTeXt, Textile, and AsciiDoc
writers.

Headers with the class \lstinline!unnumbered! will not be numbered, even
if \lstinline!--number-sections! is specified. A single hyphen
(\lstinline!-!) in an attribute context is equivalent to
\lstinline!.unnumbered!, and preferable in non-English documents. So,

\begin{lstlisting}
# My header {-}
\end{lstlisting}

is just the same as

\begin{lstlisting}
# My header {.unnumbered}
\end{lstlisting}

\subsubsection{\texorpdfstring{Extension:
\lstinline!auto_identifiers!}{Extension: auto\_identifiers}}\label{extension-autoux5fidentifiers}

A header without an explicitly specified identifier will be
automatically assigned a unique identifier based on the header text. To
derive the identifier from the header text,

\begin{itemize}
\itemsep1pt\parskip0pt\parsep0pt
\item
  Remove all formatting, links, etc.
\item
  Remove all footnotes.
\item
  Remove all punctuation, except underscores, hyphens, and periods.
\item
  Replace all spaces and newlines with hyphens.
\item
  Convert all alphabetic characters to lowercase.
\item
  Remove everything up to the first letter (identifiers may not begin
  with a number or punctuation mark).
\item
  If nothing is left after this, use the identifier \lstinline!section!.
\end{itemize}

Thus, for example,

\begin{longtable}[c]{@{}ll@{}}
\toprule
Header & Identifier\tabularnewline
\midrule
\endhead
Header identifiers in HTML &
\lstinline!header-identifiers-in-html!\tabularnewline
\emph{Dogs}?--in \emph{my} house? &
\lstinline!dogs--in-my-house!\tabularnewline
\href{http://www.w3.org/TR/html40/}{HTML},
\href{http://meyerweb.com/eric/tools/s5/}{S5}, or
\href{http://en.wikipedia.org/wiki/Rich_Text_Format}{RTF}? &
\lstinline!html-s5-or-rtf!\tabularnewline
3. Applications & \lstinline!applications!\tabularnewline
33 & \lstinline!section!\tabularnewline
\bottomrule
\end{longtable}

These rules should, in most cases, allow one to determine the identifier
from the header text. The exception is when several headers have the
same text; in this case, the first will get an identifier as described
above; the second will get the same identifier with \lstinline!-1!
appended; the third with \lstinline!-2!; and so on.

These identifiers are used to provide link targets in the table of
contents generated by the \lstinline!--toc|--table-of-contents! option.
They also make it easy to provide links from one section of a document
to another. A link to this section, for example, might look like this:

\begin{lstlisting}
See the section on
[header identifiers](#header-identifiers-in-html-latex-and-context).
\end{lstlisting}

Note, however, that this method of providing links to sections works
only in HTML, LaTeX, and ConTeXt formats.

If the \lstinline!--section-divs! option is specified, then each section
will be wrapped in a \lstinline!div! (or a \lstinline!section!, if
\lstinline!--html5! was specified), and the identifier will be attached
to the enclosing \lstinline!<div>! (or \lstinline!<section>!) tag rather
than the header itself. This allows entire sections to be manipulated
using javascript or treated differently in CSS.

\subsubsection{\texorpdfstring{Extension:
\lstinline!implicit_header_references!}{Extension: implicit\_header\_references}}\label{extension-implicitux5fheaderux5freferences}

Pandoc behaves as if reference links have been defined for each header.
So, instead of

\begin{lstlisting}
[header identifiers](#header-identifiers-in-html)
\end{lstlisting}

you can simply write

\begin{lstlisting}
[header identifiers]
\end{lstlisting}

or

\begin{lstlisting}
[header identifiers][]
\end{lstlisting}

or

\begin{lstlisting}
[the section on header identifiers][header identifiers]
\end{lstlisting}

If there are multiple headers with identical text, the corresponding
reference will link to the first one only, and you will need to use
explicit links to link to the others, as described above.

Unlike regular reference links, these references are case-sensitive.

Note: if you have defined an explicit identifier for a header, then
implicit references to it will not work.

\section{Block quotations}\label{block-quotations}

Markdown uses email conventions for quoting blocks of text. A block
quotation is one or more paragraphs or other block elements (such as
lists or headers), with each line preceded by a \lstinline!>! character
and a space. (The \lstinline!>! need not start at the left margin, but
it should not be indented more than three spaces.)

\begin{lstlisting}
> This is a block quote. This
> paragraph has two lines.
>
> 1. This is a list inside a block quote.
> 2. Second item.
\end{lstlisting}

A ``lazy'' form, which requires the \lstinline!>! character only on the
first line of each block, is also allowed:

\begin{lstlisting}
> This is a block quote. This
paragraph has two lines.

> 1. This is a list inside a block quote.
2. Second item.
\end{lstlisting}

Among the block elements that can be contained in a block quote are
other block quotes. That is, block quotes can be nested:

\begin{lstlisting}
> This is a block quote.
>
> > A block quote within a block quote.
\end{lstlisting}

\subsubsection{\texorpdfstring{Extension:
\lstinline!blank_before_blockquote!}{Extension: blank\_before\_blockquote}}\label{extension-blankux5fbeforeux5fblockquote}

Standard markdown syntax does not require a blank line before a block
quote. Pandoc does require this (except, of course, at the beginning of
the document). The reason for the requirement is that it is all too easy
for a \lstinline!>! to end up at the beginning of a line by accident
(perhaps through line wrapping). So, unless the
\lstinline!markdown_strict! format is used, the following does not
produce a nested block quote in pandoc:

\begin{lstlisting}
> This is a block quote.
>> Nested.
\end{lstlisting}

\section{Verbatim (code) blocks}\label{verbatim-code-blocks}

\subsection{Indented code blocks}\label{indented-code-blocks}

A block of text indented four spaces (or one tab) is treated as verbatim
text: that is, special characters do not trigger special formatting, and
all spaces and line breaks are preserved. For example,

\begin{lstlisting}
    if (a > 3) {
      moveShip(5 * gravity, DOWN);
    }
\end{lstlisting}

The initial (four space or one tab) indentation is not considered part
of the verbatim text, and is removed in the output.

Note: blank lines in the verbatim text need not begin with four spaces.

\hyperdef{}{fenced-code-blocks}{\subsection{Fenced code
blocks}\label{fenced-code-blocks}}

\subsubsection{\texorpdfstring{Extension:
\lstinline!fenced_code_blocks!}{Extension: fenced\_code\_blocks}}\label{extension-fencedux5fcodeux5fblocks}

In addition to standard indented code blocks, Pandoc supports
\emph{fenced} code blocks. These begin with a row of three or more
tildes (\lstinline!~!) or backticks (\lstinline!`!) and end with a row
of tildes or backticks that must be at least as long as the starting
row. Everything between these lines is treated as code. No indentation
is necessary:

\begin{lstlisting}
~~~~~~~
if (a > 3) {
  moveShip(5 * gravity, DOWN);
}
~~~~~~~
\end{lstlisting}

Like regular code blocks, fenced code blocks must be separated from
surrounding text by blank lines.

If the code itself contains a row of tildes or backticks, just use a
longer row of tildes or backticks at the start and end:

\begin{lstlisting}
~~~~~~~~~~~~~~~~
~~~~~~~~~~
code including tildes
~~~~~~~~~~
~~~~~~~~~~~~~~~~
\end{lstlisting}

\subsubsection{\texorpdfstring{Extension:
\lstinline!fenced_code_attributes!}{Extension: fenced\_code\_attributes}}\label{extension-fencedux5fcodeux5fattributes}

Optionally, you may attach attributes to the code block using this
syntax:

\begin{lstlisting}
~~~~ {#mycode .haskell .numberLines startFrom="100"}
qsort []     = []
qsort (x:xs) = qsort (filter (< x) xs) ++ [x] ++
               qsort (filter (>= x) xs)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
\end{lstlisting}

Here \lstinline!mycode! is an identifier, \lstinline!haskell! and
\lstinline!numberLines! are classes, and \lstinline!startFrom! is an
attribute with value \lstinline!100!. Some output formats can use this
information to do syntax highlighting. Currently, the only output
formats that uses this information are HTML and LaTeX. If highlighting
is supported for your output format and language, then the code block
above will appear highlighted, with numbered lines. (To see which
languages are supported, do \lstinline!pandoc --version!.) Otherwise,
the code block above will appear as follows:

\begin{lstlisting}
<pre id="mycode" class="haskell numberLines" startFrom="100">
  <code>
  ...
  </code>
</pre>
\end{lstlisting}

A shortcut form can also be used for specifying the language of the code
block:

\begin{lstlisting}
```haskell
qsort [] = []
```
\end{lstlisting}

This is equivalent to:

\begin{lstlisting}
``` {.haskell}
qsort [] = []
```
\end{lstlisting}

If the \lstinline!fenced_code_attributes! extension is disabled, but
input contains class attribute(s) for the codeblock, the first class
attribute will be printed after the opening fence as a bare word.

To prevent all highlighting, use the \lstinline!--no-highlight! flag. To
set the highlighting style, use \lstinline!--highlight-style!.

\section{Line blocks}\label{line-blocks}

\subsubsection{\texorpdfstring{Extension:
\lstinline!line_blocks!}{Extension: line\_blocks}}\label{extension-lineux5fblocks}

A line block is a sequence of lines beginning with a vertical bar
(\lstinline!|!) followed by a space. The division into lines will be
preserved in the output, as will any leading spaces; otherwise, the
lines will be formatted as markdown. This is useful for verse and
addresses:

\begin{lstlisting}
| The limerick packs laughs anatomical
| In space that is quite economical.
|    But the good ones I've seen
|    So seldom are clean
| And the clean ones so seldom are comical

| 200 Main St.
| Berkeley, CA 94718
\end{lstlisting}

The lines can be hard-wrapped if needed, but the continuation line must
begin with a space.

\begin{lstlisting}
| The Right Honorable Most Venerable and Righteous Samuel L.
  Constable, Jr.
| 200 Main St.
| Berkeley, CA 94718
\end{lstlisting}

This syntax is borrowed from
\href{http://docutils.sourceforge.net/docs/ref/rst/introduction.html}{reStructuredText}.

\section{Lists}\label{lists}

\subsection{Bullet lists}\label{bullet-lists}

A bullet list is a list of bulleted list items. A bulleted list item
begins with a bullet (\lstinline!*!, \lstinline!+!, or \lstinline!-!).
Here is a simple example:

\begin{lstlisting}
* one
* two
* three
\end{lstlisting}

This will produce a ``compact'' list. If you want a ``loose'' list, in
which each item is formatted as a paragraph, put spaces between the
items:

\begin{lstlisting}
* one

* two

* three
\end{lstlisting}

The bullets need not be flush with the left margin; they may be indented
one, two, or three spaces. The bullet must be followed by whitespace.

List items look best if subsequent lines are flush with the first line
(after the bullet):

\begin{lstlisting}
* here is my first
  list item.
* and my second.
\end{lstlisting}

But markdown also allows a ``lazy'' format:

\begin{lstlisting}
* here is my first
list item.
* and my second.
\end{lstlisting}

\subsection{The four-space rule}\label{the-four-space-rule}

A list item may contain multiple paragraphs and other block-level
content. However, subsequent paragraphs must be preceded by a blank line
and indented four spaces or a tab. The list will look better if the
first paragraph is aligned with the rest:

\begin{lstlisting}
  * First paragraph.

    Continued.

  * Second paragraph. With a code block, which must be indented
    eight spaces:

        { code }
\end{lstlisting}

List items may include other lists. In this case the preceding blank
line is optional. The nested list must be indented four spaces or one
tab:

\begin{lstlisting}
* fruits
    + apples
        - macintosh
        - red delicious
    + pears
    + peaches
* vegetables
    + broccoli
    + chard
\end{lstlisting}

As noted above, markdown allows you to write list items ``lazily,''
instead of indenting continuation lines. However, if there are multiple
paragraphs or other blocks in a list item, the first line of each must
be indented.

\begin{lstlisting}
+ A lazy, lazy, list
item.

+ Another one; this looks
bad but is legal.

    Second paragraph of second
list item.
\end{lstlisting}

\textbf{Note:} Although the four-space rule for continuation paragraphs
comes from the official
\href{http://daringfireball.net/projects/markdown/syntax\#list}{markdown
syntax guide}, the reference implementation, \lstinline!Markdown.pl!,
does not follow it. So pandoc will give different results than
\lstinline!Markdown.pl! when authors have indented continuation
paragraphs fewer than four spaces.

The
\href{http://daringfireball.net/projects/markdown/syntax\#list}{markdown
syntax guide} is not explicit whether the four-space rule applies to
\emph{all} block-level content in a list item; it only mentions
paragraphs and code blocks. But it implies that the rule applies to all
block-level content (including nested lists), and pandoc interprets it
that way.

\subsection{Ordered lists}\label{ordered-lists}

Ordered lists work just like bulleted lists, except that the items begin
with enumerators rather than bullets.

In standard markdown, enumerators are decimal numbers followed by a
period and a space. The numbers themselves are ignored, so there is no
difference between this list:

\begin{lstlisting}
1.  one
2.  two
3.  three
\end{lstlisting}

and this one:

\begin{lstlisting}
5.  one
7.  two
1.  three
\end{lstlisting}

\subsubsection{\texorpdfstring{Extension:
\lstinline!fancy_lists!}{Extension: fancy\_lists}}\label{extension-fancyux5flists}

Unlike standard markdown, Pandoc allows ordered list items to be marked
with uppercase and lowercase letters and roman numerals, in addition to
arabic numerals. List markers may be enclosed in parentheses or followed
by a single right-parentheses or period. They must be separated from the
text that follows by at least one space, and, if the list marker is a
capital letter with a period, by at least two spaces.\footnote{The point
  of this rule is to ensure that normal paragraphs starting with
  people's initials, like B. Russell was an English philosopher. do not
  get treated as list items. This rule will not prevent (C) 2007 Joe
  Smith from being interpreted as a list item. In this case, a backslash
  escape can be used: (C) 2007 Joe Smith}

The \lstinline!fancy_lists! extension also allows `\lstinline!#!' to be
used as an ordered list marker in place of a numeral:

\begin{lstlisting}
#. one
#. two
\end{lstlisting}

\subsubsection{\texorpdfstring{Extension:
\lstinline!startnum!}{Extension: startnum}}\label{extension-startnum}

Pandoc also pays attention to the type of list marker used, and to the
starting number, and both of these are preserved where possible in the
output format. Thus, the following yields a list with numbers followed
by a single parenthesis, starting with 9, and a sublist with lowercase
roman numerals:

\begin{lstlisting}
 9)  Ninth
10)  Tenth
11)  Eleventh
       i. subone
      ii. subtwo
     iii. subthree
\end{lstlisting}

Pandoc will start a new list each time a different type of list marker
is used. So, the following will create three lists:

\begin{lstlisting}
(2) Two
(5) Three
1.  Four
*   Five
\end{lstlisting}

If default list markers are desired, use \lstinline!#.!:

\begin{lstlisting}
#.  one
#.  two
#.  three
\end{lstlisting}

\hyperdef{}{definition-lists}{\subsection{Definition
lists}\label{definition-lists}}

\subsubsection{\texorpdfstring{Extension:
\lstinline!definition_lists!}{Extension: definition\_lists}}\label{extension-definitionux5flists}

Pandoc supports definition lists, using the syntax of
\href{http://www.michelf.com/projects/php-markdown/extra/}{PHP Markdown
Extra} with some extensions.\footnote{I have been influenced by the
  suggestions of
  \href{http://www.justatheory.com/computers/markup/modest-markdown-proposal.html}{David
  Wheeler}.}

\begin{lstlisting}
Term 1

:   Definition 1

Term 2 with *inline markup*

:   Definition 2

        { some code, part of Definition 2 }

    Third paragraph of definition 2.
\end{lstlisting}

Each term must fit on one line, which may optionally be followed by a
blank line, and must be followed by one or more definitions. A
definition begins with a colon or tilde, which may be indented one or
two spaces.

A term may have multiple definitions, and each definition may consist of
one or more block elements (paragraph, code block, list, etc.), each
indented four spaces or one tab stop. The body of the definition
(including the first line, aside from the colon or tilde) should be
indented four spaces. However, as with other markdown lists, you can
``lazily'' omit indentation except at the beginning of a paragraph or
other block element:

\begin{lstlisting}
Term 1

:   Definition
with lazy continuation.

    Second paragraph of the definition.
\end{lstlisting}

If you leave space before the definition (as in the example above), the
text of the definition will be treated as a paragraph. In some output
formats, this will mean greater spacing between term/definition pairs.
For a more compact definition list, omit the space before the
definition:

\begin{lstlisting}
Term 1
  ~ Definition 1

Term 2
  ~ Definition 2a
  ~ Definition 2b
\end{lstlisting}

Note that space between items in a definition list is required. (A
variant that loosens this requirement, but disallows ``lazy'' hard
wrapping, can be activated with \lstinline!compact_definition_lists!:
see \hyperref[non-pandoc-extensions]{Non-pandoc extensions}, below.)

\subsection{Numbered example lists}\label{numbered-example-lists}

\subsubsection{\texorpdfstring{Extension:
\lstinline!example_lists!}{Extension: example\_lists}}\label{extension-exampleux5flists}

The special list marker \lstinline!@! can be used for sequentially
numbered examples. The first list item with a \lstinline!@! marker will
be numbered `1', the next `2', and so on, throughout the document. The
numbered examples need not occur in a single list; each new list using
\lstinline!@! will take up where the last stopped. So, for example:

\begin{lstlisting}
(@)  My first example will be numbered (1).
(@)  My second example will be numbered (2).

Explanation of examples.

(@)  My third example will be numbered (3).
\end{lstlisting}

Numbered examples can be labeled and referred to elsewhere in the
document:

\begin{lstlisting}
(@good)  This is a good example.

As (@good) illustrates, ...
\end{lstlisting}

The label can be any string of alphanumeric characters, underscores, or
hyphens.

\subsection{Compact and loose lists}\label{compact-and-loose-lists}

Pandoc behaves differently from \lstinline!Markdown.pl! on some ``edge
cases'' involving lists. Consider this source:

\begin{lstlisting}
+   First
+   Second:
    -   Fee
    -   Fie
    -   Foe

+   Third
\end{lstlisting}

Pandoc transforms this into a ``compact list'' (with no \lstinline!<p>!
tags around ``First'', ``Second'', or ``Third''), while markdown puts
\lstinline!<p>! tags around ``Second'' and ``Third'' (but not
``First''), because of the blank space around ``Third''. Pandoc follows
a simple rule: if the text is followed by a blank line, it is treated as
a paragraph. Since ``Second'' is followed by a list, and not a blank
line, it isn't treated as a paragraph. The fact that the list is
followed by a blank line is irrelevant. (Note: Pandoc works this way
even when the \lstinline!markdown_strict! format is specified. This
behavior is consistent with the official markdown syntax description,
even though it is different from that of \lstinline!Markdown.pl!.)

\subsection{Ending a list}\label{ending-a-list}

What if you want to put an indented code block after a list?

\begin{lstlisting}
-   item one
-   item two

    { my code block }
\end{lstlisting}

Trouble! Here pandoc (like other markdown implementations) will treat
\lstinline!{ my code block }! as the second paragraph of item two, and
not as a code block.

To ``cut off'' the list after item two, you can insert some non-indented
content, like an HTML comment, which won't produce visible output in any
format:

\begin{lstlisting}
-   item one
-   item two

<!-- end of list -->

    { my code block }
\end{lstlisting}

You can use the same trick if you want two consecutive lists instead of
one big list:

\begin{lstlisting}
1.  one
2.  two
3.  three

<!-- -->

1.  uno
2.  dos
3.  tres
\end{lstlisting}

\section{Horizontal rules}\label{horizontal-rules}

A line containing a row of three or more \lstinline!*!, \lstinline!-!,
or \lstinline!_! characters (optionally separated by spaces) produces a
horizontal rule:

\begin{lstlisting}
*  *  *  *

---------------
\end{lstlisting}

\section{Tables}\label{tables}

Four kinds of tables may be used. The first three kinds presuppose the
use of a fixed-width font, such as Courier. The fourth kind can be used
with proportionally spaced fonts, as it does not require lining up
columns.

\subsubsection{\texorpdfstring{Extension:
\lstinline!table_captions!}{Extension: table\_captions}}\label{extension-tableux5fcaptions}

A caption may optionally be provided with all 4 kinds of tables (as
illustrated in the examples below). A caption is a paragraph beginning
with the string \lstinline!Table:! (or just \lstinline!:!), which will
be stripped off. It may appear either before or after the table.

\subsubsection{\texorpdfstring{Extension:
\lstinline!simple_tables!}{Extension: simple\_tables}}\label{extension-simpleux5ftables}

Simple tables look like this:

\begin{lstlisting}
  Right     Left     Center     Default
-------     ------ ----------   -------
     12     12        12            12
    123     123       123          123
      1     1          1             1

Table:  Demonstration of simple table syntax.
\end{lstlisting}

The headers and table rows must each fit on one line. Column alignments
are determined by the position of the header text relative to the dashed
line below it:\footnote{This scheme is due to Michel Fortin, who
  proposed it on the
  \href{http://six.pairlist.net/pipermail/markdown-discuss/2005-March/001097.html}{Markdown
  discussion list}.}

\begin{itemize}
\itemsep1pt\parskip0pt\parsep0pt
\item
  If the dashed line is flush with the header text on the right side but
  extends beyond it on the left, the column is right-aligned.
\item
  If the dashed line is flush with the header text on the left side but
  extends beyond it on the right, the column is left-aligned.
\item
  If the dashed line extends beyond the header text on both sides, the
  column is centered.
\item
  If the dashed line is flush with the header text on both sides, the
  default alignment is used (in most cases, this will be left).
\end{itemize}

The table must end with a blank line, or a line of dashes followed by a
blank line.

The column headers may be omitted, provided a dashed line is used to end
the table. For example:

\begin{lstlisting}
-------     ------ ----------   -------
     12     12        12             12
    123     123       123           123
      1     1          1              1
-------     ------ ----------   -------
\end{lstlisting}

When headers are omitted, column alignments are determined on the basis
of the first line of the table body. So, in the tables above, the
columns would be right, left, center, and right aligned, respectively.

\subsubsection{\texorpdfstring{Extension:
\lstinline!multiline_tables!}{Extension: multiline\_tables}}\label{extension-multilineux5ftables}

Multiline tables allow headers and table rows to span multiple lines of
text (but cells that span multiple columns or rows of the table are not
supported). Here is an example:

\begin{lstlisting}
-------------------------------------------------------------
 Centered   Default           Right Left
  Header    Aligned         Aligned Aligned
----------- ------- --------------- -------------------------
   First    row                12.0 Example of a row that
                                    spans multiple lines.

  Second    row                 5.0 Here's another one. Note
                                    the blank line between
                                    rows.
-------------------------------------------------------------

Table: Here's the caption. It, too, may span
multiple lines.
\end{lstlisting}

These work like simple tables, but with the following differences:

\begin{itemize}
\itemsep1pt\parskip0pt\parsep0pt
\item
  They must begin with a row of dashes, before the header text (unless
  the headers are omitted).
\item
  They must end with a row of dashes, then a blank line.
\item
  The rows must be separated by blank lines.
\end{itemize}

In multiline tables, the table parser pays attention to the widths of
the columns, and the writers try to reproduce these relative widths in
the output. So, if you find that one of the columns is too narrow in the
output, try widening it in the markdown source.

Headers may be omitted in multiline tables as well as simple tables:

\begin{lstlisting}
----------- ------- --------------- -------------------------
   First    row                12.0 Example of a row that
                                    spans multiple lines.

  Second    row                 5.0 Here's another one. Note
                                    the blank line between
                                    rows.
----------- ------- --------------- -------------------------

: Here's a multiline table without headers.
\end{lstlisting}

It is possible for a multiline table to have just one row, but the row
should be followed by a blank line (and then the row of dashes that ends
the table), or the table may be interpreted as a simple table.

\subsubsection{\texorpdfstring{Extension:
\lstinline!grid_tables!}{Extension: grid\_tables}}\label{extension-gridux5ftables}

Grid tables look like this:

\begin{lstlisting}
: Sample grid table.

+---------------+---------------+--------------------+
| Fruit         | Price         | Advantages         |
+===============+===============+====================+
| Bananas       | $1.34         | - built-in wrapper |
|               |               | - bright color     |
+---------------+---------------+--------------------+
| Oranges       | $2.10         | - cures scurvy     |
|               |               | - tasty            |
+---------------+---------------+--------------------+
\end{lstlisting}

The row of \lstinline!=!s separates the header from the table body, and
can be omitted for a headerless table. The cells of grid tables may
contain arbitrary block elements (multiple paragraphs, code blocks,
lists, etc.). Alignments are not supported, nor are cells that span
multiple columns or rows. Grid tables can be created easily using
\href{http://table.sourceforge.net/}{Emacs table mode}.

\subsubsection{\texorpdfstring{Extension:
\lstinline!pipe_tables!}{Extension: pipe\_tables}}\label{extension-pipeux5ftables}

Pipe tables look like this:

\begin{lstlisting}
| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |

  : Demonstration of pipe table syntax.
\end{lstlisting}

The syntax is
\href{http://michelf.ca/projects/php-markdown/extra/\#table}{the same as
in PHP markdown extra}. The beginning and ending pipe characters are
optional, but pipes are required between all columns. The colons
indicate column alignment as shown. The header can be omitted, but the
horizontal line must still be included, as it defines column alignments.

Since the pipes indicate column boundaries, columns need not be
vertically aligned, as they are in the above example. So, this is a
perfectly legal (though ugly) pipe table:

\begin{lstlisting}
fruit| price
-----|-----:
apple|2.05
pear|1.37
orange|3.09
\end{lstlisting}

The cells of pipe tables cannot contain block elements like paragraphs
and lists, and cannot span multiple lines. Note also that in LaTeX/PDF
output, the cells produced by pipe tables will not wrap, since there is
no information available about relative widths. If you want content to
wrap within cells, use multiline or grid tables.

Note: Pandoc also recognizes pipe tables of the following form, as can
produced by Emacs' orgtbl-mode:

\begin{lstlisting}
| One | Two   |
|-----+-------|
| my  | table |
| is  | nice  |
\end{lstlisting}

The difference is that \lstinline!+! is used instead of \lstinline!|!.
Other orgtbl features are not supported. In particular, to get
non-default column alignment, you'll need to add colons as above.

\section{Metadata blocks}\label{metadata-blocks}

\subsubsection{\texorpdfstring{Extension:
\lstinline!pandoc_title_block!}{Extension: pandoc\_title\_block}}\label{extension-pandocux5ftitleux5fblock}

If the file begins with a title block

\begin{lstlisting}
% title
% author(s) (separated by semicolons)
% date
\end{lstlisting}

it will be parsed as bibliographic information, not regular text. (It
will be used, for example, in the title of standalone LaTeX or HTML
output.) The block may contain just a title, a title and an author, or
all three elements. If you want to include an author but no title, or a
title and a date but no author, you need a blank line:

\begin{lstlisting}
%
% Author

% My title
%
% June 15, 2006
\end{lstlisting}

The title may occupy multiple lines, but continuation lines must begin
with leading space, thus:

\begin{lstlisting}
% My title
  on multiple lines
\end{lstlisting}

If a document has multiple authors, the authors may be put on separate
lines with leading space, or separated by semicolons, or both. So, all
of the following are equivalent:

\begin{lstlisting}
% Author One
  Author Two

% Author One; Author Two

% Author One;
  Author Two
\end{lstlisting}

The date must fit on one line.

All three metadata fields may contain standard inline formatting
(italics, links, footnotes, etc.).

Title blocks will always be parsed, but they will affect the output only
when the \lstinline!--standalone! (\lstinline!-s!) option is chosen. In
HTML output, titles will appear twice: once in the document head -- this
is the title that will appear at the top of the window in a browser --
and once at the beginning of the document body. The title in the
document head can have an optional prefix attached
(\lstinline!--title-prefix! or \lstinline!-T! option). The title in the
body appears as an H1 element with class ``title'', so it can be
suppressed or reformatted with CSS. If a title prefix is specified with
\lstinline!-T! and no title block appears in the document, the title
prefix will be used by itself as the HTML title.

The man page writer extracts a title, man page section number, and other
header and footer information from the title line. The title is assumed
to be the first word on the title line, which may optionally end with a
(single-digit) section number in parentheses. (There should be no space
between the title and the parentheses.) Anything after this is assumed
to be additional footer and header text. A single pipe character
(\lstinline!|!) should be used to separate the footer text from the
header text. Thus,

\begin{lstlisting}
% PANDOC(1)
\end{lstlisting}

will yield a man page with the title \lstinline!PANDOC! and section 1.

\begin{lstlisting}
% PANDOC(1) Pandoc User Manuals
\end{lstlisting}

will also have ``Pandoc User Manuals'' in the footer.

\begin{lstlisting}
% PANDOC(1) Pandoc User Manuals | Version 4.0
\end{lstlisting}

will also have ``Version 4.0'' in the header.

\subsubsection{\texorpdfstring{Extension:
\lstinline!yaml_metadata_block!}{Extension: yaml\_metadata\_block}}\label{extension-yamlux5fmetadataux5fblock}

A YAML metadata block is a valid YAML object, delimited by a line of
three hyphens (\lstinline!---!) at the top and a line of three hyphens
(\lstinline!---!) or three dots (\lstinline!...!) at the bottom. A YAML
metadata block may occur anywhere in the document, but if it is not at
the beginning, it must be preceded by a blank line. (Note that, because
of the way pandoc concatenates input files when several are provided,
you may also keep the metadata in a separate YAML file and pass it to
pandoc as an argument, along with your markdown files:

\begin{lstlisting}
pandoc chap1.md chap2.md chap3.md metadata.yaml -s -o book.html
\end{lstlisting}

Just be sure that the YAML file begins with \lstinline!---! and ends
with \lstinline!---! or \lstinline!...!.)

Metadata will be taken from the fields of the YAML object and added to
any existing document metadata. Metadata can contain lists and objects
(nested arbitrarily), but all string scalars will be interpreted as
markdown. Fields with names ending in an underscore will be ignored by
pandoc. (They may be given a role by external processors.)

A document may contain multiple metadata blocks. The metadata fields
will be combined through a \emph{left-biased union}: if two metadata
blocks attempt to set the same field, the value from the first block
will be taken.

When pandoc is used with \lstinline!-t markdown! to create a markdown
document, a YAML metadata block will be produced only if the
\lstinline!-s/--standalone! option is used. All of the metadata will
appear in a single block at the beginning of the document.

Note that YAML escaping rules must be followed. Thus, for example, if a
title contains a colon, it must be quoted. The pipe character
(\lstinline!|!) can be used to begin an indented block that will be
interpreted literally, without need for escaping. This form is necessary
when the field contains blank lines:

\begin{lstlisting}
---
title:  'This is the title: it contains a colon'
author:
- name: Author One
  affiliation: University of Somewhere
- name: Author Two
  affiliation: University of Nowhere
tags: [nothing, nothingness]
abstract: |
  This is the abstract.

  It consists of two paragraphs.
...
\end{lstlisting}

Template variables will be set automatically from the metadata. Thus,
for example, in writing HTML, the variable \lstinline!abstract! will be
set to the HTML equivalent of the markdown in the \lstinline!abstract!
field:

\begin{lstlisting}
<p>This is the abstract.</p>
<p>It consists of two paragraphs.</p>
\end{lstlisting}

Note: The \lstinline!author! variable in the default templates expects a
simple list or string. To use the structured authors in the example, you
would need a custom template. For example:

\begin{lstlisting}
$for(author)$
$if(author.name)$
$author.name$$if(author.affiliation)$ ($author.affiliation$)$endif$
$else$
$author$
$endif$
$endfor$
\end{lstlisting}

\section{Backslash escapes}\label{backslash-escapes}

\subsubsection{\texorpdfstring{Extension:
\lstinline!all_symbols_escapable!}{Extension: all\_symbols\_escapable}}\label{extension-allux5fsymbolsux5fescapable}

Except inside a code block or inline code, any punctuation or space
character preceded by a backslash will be treated literally, even if it
would normally indicate formatting. Thus, for example, if one writes

\begin{lstlisting}
*\*hello\**
\end{lstlisting}

one will get

\begin{lstlisting}
<em>*hello*</em>
\end{lstlisting}

instead of

\begin{lstlisting}
<strong>hello</strong>
\end{lstlisting}

This rule is easier to remember than standard markdown's rule, which
allows only the following characters to be backslash-escaped:

\begin{lstlisting}
\`*_{}[]()>#+-.!
\end{lstlisting}

(However, if the \lstinline!markdown_strict! format is used, the
standard markdown rule will be used.)

A backslash-escaped space is parsed as a nonbreaking space. It will
appear in TeX output as \lstinline!~! and in HTML and XML as
\lstinline!\&#160;! or \lstinline!\&nbsp;!.

A backslash-escaped newline (i.e.~a backslash occurring at the end of a
line) is parsed as a hard line break. It will appear in TeX output as
\lstinline!\\! and in HTML as \lstinline!<br />!. This is a nice
alternative to markdown's ``invisible'' way of indicating hard line
breaks using two trailing spaces on a line.

Backslash escapes do not work in verbatim contexts.

\section{Smart punctuation}\label{smart-punctuation}

\subsubsection{Extension}\label{extension}

If the \lstinline!--smart! option is specified, pandoc will produce
typographically correct output, converting straight quotes to curly
quotes, \lstinline!---! to em-dashes, \lstinline!--! to en-dashes, and
\lstinline!...! to ellipses. Nonbreaking spaces are inserted after
certain abbreviations, such as ``Mr.''

Note: if your LaTeX template uses the \lstinline!csquotes! package,
pandoc will detect automatically this and use \lstinline!\enquote{...}!
for quoted text.

\hyperdef{}{inline-formatting}{\section{Inline
formatting}\label{inline-formatting}}

\subsection{Emphasis}\label{emphasis}

To \emph{emphasize} some text, surround it with \lstinline!*!s or
\lstinline!_!, like this:

\begin{lstlisting}
This text is _emphasized with underscores_, and this
is *emphasized with asterisks*.
\end{lstlisting}

Double \lstinline!*! or \lstinline!_! produces \textbf{strong emphasis}:

\begin{lstlisting}
This is **strong emphasis** and __with underscores__.
\end{lstlisting}

A \lstinline!*! or \lstinline!_! character surrounded by spaces, or
backslash-escaped, will not trigger emphasis:

\begin{lstlisting}
This is * not emphasized *, and \*neither is this\*.
\end{lstlisting}

\subsubsection{\texorpdfstring{Extension:
\lstinline!intraword_underscores!}{Extension: intraword\_underscores}}\label{extension-intrawordux5funderscores}

Because \lstinline!_! is sometimes used inside words and identifiers,
pandoc does not interpret a \lstinline!_! surrounded by alphanumeric
characters as an emphasis marker. If you want to emphasize just part of
a word, use \lstinline!*!:

\begin{lstlisting}
feas*ible*, not feas*able*.
\end{lstlisting}

\subsection{Strikeout}\label{strikeout}

\subsubsection{\texorpdfstring{Extension:
\lstinline!strikeout!}{Extension: strikeout}}\label{extension-strikeout}

To strikeout a section of text with a horizontal line, begin and end it
with \lstinline!~~!. Thus, for example,

\begin{lstlisting}
This ~~is deleted text.~~
\end{lstlisting}

\subsection{Superscripts and
subscripts}\label{superscripts-and-subscripts}

\subsubsection{\texorpdfstring{Extension: \lstinline!superscript!,
\lstinline!subscript!}{Extension: superscript, subscript}}\label{extension-superscript-subscript}

Superscripts may be written by surrounding the superscripted text by
\lstinline!^! characters; subscripts may be written by surrounding the
subscripted text by \lstinline!~! characters. Thus, for example,

\begin{lstlisting}
H~2~O is a liquid.  2^10^ is 1024.
\end{lstlisting}

If the superscripted or subscripted text contains spaces, these spaces
must be escaped with backslashes. (This is to prevent accidental
superscripting and subscripting through the ordinary use of
\lstinline!~! and \lstinline!^!.) Thus, if you want the letter P with `a
cat' in subscripts, use \lstinline!P~a\ cat~!, not \lstinline!P~a cat~!.

\subsection{Verbatim}\label{verbatim}

To make a short span of text verbatim, put it inside backticks:

\begin{lstlisting}
What is the difference between `>>=` and `>>`?
\end{lstlisting}

If the verbatim text includes a backtick, use double backticks:

\begin{lstlisting}
Here is a literal backtick `` ` ``.
\end{lstlisting}

(The spaces after the opening backticks and before the closing backticks
will be ignored.)

The general rule is that a verbatim span starts with a string of
consecutive backticks (optionally followed by a space) and ends with a
string of the same number of backticks (optionally preceded by a space).

Note that backslash-escapes (and other markdown constructs) do not work
in verbatim contexts:

\begin{lstlisting}
This is a backslash followed by an asterisk: `\*`.
\end{lstlisting}

\subsubsection{\texorpdfstring{Extension:
\lstinline!inline_code_attributes!}{Extension: inline\_code\_attributes}}\label{extension-inlineux5fcodeux5fattributes}

Attributes can be attached to verbatim text, just as with
\hyperref[fenced-code-blocks]{fenced code blocks}:

\begin{lstlisting}
`<$>`{.haskell}
\end{lstlisting}

\subsection{Small caps}\label{small-caps}

To write small caps, you can use an HTML span tag:

\begin{lstlisting}
<span style="font-variant:small-caps;">Small caps</span>
\end{lstlisting}

(The semicolon is optional and there may be space after the colon.) This
will work in all output formats that support small caps.

\section{Math}\label{math}

\subsubsection{\texorpdfstring{Extension:
\lstinline!tex_math_dollars!}{Extension: tex\_math\_dollars}}\label{extension-texux5fmathux5fdollars}

Anything between two \lstinline!$! characters will be treated as TeX
math. The opening \lstinline!$! must have a non-space character
immediately to its right, while the closing \lstinline!$! must have a
non-space character immediately to its left, and must not be followed
immediately by a digit. Thus, \lstinline!$20,000 and $30,000! won't
parse as math. If for some reason you need to enclose text in literal
\lstinline!$! characters, backslash-escape them and they won't be
treated as math delimiters.

TeX math will be printed in all output formats. How it is rendered
depends on the output format:

\begin{description}
\item[Markdown, LaTeX, Org-Mode, ConTeXt]
It will appear verbatim between \lstinline!$! characters.
\item[reStructuredText]
It will be rendered using an interpreted text role \lstinline!:math:!,
as described
\href{http://docutils.sourceforge.net/docs/ref/rst/roles.html\#math}{here}
\item[AsciiDoc]
It will be rendered as \lstinline!latexmath:[...]!.
\item[Texinfo]
It will be rendered inside a \lstinline!@math! command.
\item[groff man]
It will be rendered verbatim without \lstinline!$!'s.
\item[MediaWiki, DokuWiki]
It will be rendered inside \lstinline!<math>! tags.
\item[Textile]
It will be rendered inside \lstinline!<span class="math">! tags.
\item[RTF, OpenDocument, ODT]
It will be rendered, if possible, using unicode characters, and will
otherwise appear verbatim.
\item[Docbook]
If the \lstinline!--mathml! flag is used, it will be rendered using
mathml in an \lstinline!inlineequation! or \lstinline!informalequation!
tag. Otherwise it will be rendered, if possible, using unicode
characters.
\item[Docx]
It will be rendered using OMML math markup.
\item[FictionBook2]
If the \lstinline!--webtex! option is used, formulas are rendered as
images using Google Charts or other compatible web service, downloaded
and embedded in the e-book. Otherwise, they will appear verbatim.
\item[HTML, Slidy, DZSlides, S5, EPUB]
The way math is rendered in HTML will depend on the command-line options
selected:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  The default is to render TeX math as far as possible using unicode
  characters, as with RTF, DocBook, and OpenDocument output. Formulas
  are put inside a \lstinline!span! with \lstinline!class="math"!, so
  that they may be styled differently from the surrounding text if
  needed.
\item
  If the \lstinline!--latexmathml! option is used, TeX math will be
  displayed between \lstinline!$! or \lstinline!$$! characters and put
  in \lstinline!<span>! tags with class \lstinline!LaTeX!. The
  \href{http://math.etsu.edu/LaTeXMathML/}{LaTeXMathML} script will be
  used to render it as formulas. (This trick does not work in all
  browsers, but it works in Firefox. In browsers that do not support
  LaTeXMathML, TeX math will appear verbatim between \lstinline!$!
  characters.)
\item
  If the \lstinline!--jsmath! option is used, TeX math will be put
  inside \lstinline!<span>! tags (for inline math) or \lstinline!<div>!
  tags (for display math) with class \lstinline!math!. The
  \href{http://www.math.union.edu/~dpvc/jsmath/}{jsMath} script will be
  used to render it.
\item
  If the \lstinline!--mimetex! option is used, the
  \href{http://www.forkosh.com/mimetex.html}{mimeTeX} CGI script will be
  called to generate images for each TeX formula. This should work in
  all browsers. The \lstinline!--mimetex! option takes an optional URL
  as argument. If no URL is specified, it will be assumed that the
  mimeTeX CGI script is at \lstinline!/cgi-bin/mimetex.cgi!.
\item
  If the \lstinline!--gladtex! option is used, TeX formulas will be
  enclosed in \lstinline!<eq>! tags in the HTML output. The resulting
  \lstinline!htex! file may then be processed by
  \href{http://ans.hsh.no/home/mgg/gladtex/}{gladTeX}, which will
  produce image files for each formula and an \lstinline!html! file with
  links to these images. So, the procedure is:

\begin{lstlisting}
pandoc -s --gladtex myfile.txt -o myfile.htex
gladtex -d myfile-images myfile.htex
# produces myfile.html and images in myfile-images
\end{lstlisting}
\item
  If the \lstinline!--webtex! option is used, TeX formulas will be
  converted to \lstinline!<img>! tags that link to an external script
  that converts formulas to images. The formula will be URL-encoded and
  concatenated with the URL provided. If no URL is specified, the Google
  Chart API will be used
  (\lstinline!http://chart.apis.google.com/chart?cht=tx&chl=!).
\item
  If the \lstinline!--mathjax! option is used, TeX math will be
  displayed between \lstinline!\(...\)! (for inline math) or
  \lstinline!\[...\]! (for display math) and put in \lstinline!<span>!
  tags with class \lstinline!math!. The
  \href{http://www.mathjax.org/}{MathJax} script will be used to render
  it as formulas.
\end{enumerate}
\end{description}

\section{Raw HTML}\label{raw-html}

\subsubsection{\texorpdfstring{Extension:
\lstinline!raw_html!}{Extension: raw\_html}}\label{extension-rawux5fhtml}

Markdown allows you to insert raw HTML (or DocBook) anywhere in a
document (except verbatim contexts, where \lstinline!<!, \lstinline!>!,
and \lstinline!&! are interpreted literally). (Technically this is not
an extension, since standard markdown allows it, but it has been made an
extension so that it can be disabled if desired.)

The raw HTML is passed through unchanged in HTML, S5, Slidy, Slideous,
DZSlides, EPUB, Markdown, and Textile output, and suppressed in other
formats.

\subsubsection{\texorpdfstring{Extension:
\lstinline!markdown_in_html_blocks!}{Extension: markdown\_in\_html\_blocks}}\label{extension-markdownux5finux5fhtmlux5fblocks}

Standard markdown allows you to include HTML ``blocks'': blocks of HTML
between balanced tags that are separated from the surrounding text with
blank lines, and start and end at the left margin. Within these blocks,
everything is interpreted as HTML, not markdown; so (for example),
\lstinline!*! does not signify emphasis.

Pandoc behaves this way when the \lstinline!markdown_strict! format is
used; but by default, pandoc interprets material between HTML block tags
as markdown. Thus, for example, Pandoc will turn

\begin{lstlisting}
<table>
    <tr>
        <td>*one*</td>
        <td>[a link](http://google.com)</td>
    </tr>
</table>
\end{lstlisting}

into

\begin{lstlisting}
<table>
    <tr>
        <td><em>one</em></td>
        <td><a href="http://google.com">a link</a></td>
    </tr>
</table>
\end{lstlisting}

whereas \lstinline!Markdown.pl! will preserve it as is.

There is one exception to this rule: text between \lstinline!<script>!
and \lstinline!<style>! tags is not interpreted as markdown.

This departure from standard markdown should make it easier to mix
markdown with HTML block elements. For example, one can surround a block
of markdown text with \lstinline!<div>! tags without preventing it from
being interpreted as markdown.

\subsubsection{\texorpdfstring{Extension:
\lstinline!native_divs!}{Extension: native\_divs}}\label{extension-nativeux5fdivs}

Use native pandoc \lstinline!Div! blocks for content inside
\lstinline!<div>! tags. For the most part this should give the same
output as \lstinline!markdown_in_html_blocks!, but it makes it easier to
write pandoc filters to manipulate groups of blocks.

\subsubsection{\texorpdfstring{Extension:
\lstinline!native_spans!}{Extension: native\_spans}}\label{extension-nativeux5fspans}

Use native pandoc \lstinline!Span! blocks for content inside
\lstinline!<span>! tags. For the most part this should give the same
output as \lstinline!raw_html!, but it makes it easier to write pandoc
filters to manipulate groups of inlines.

\section{Raw TeX}\label{raw-tex}

\subsubsection{\texorpdfstring{Extension:
\lstinline!raw_tex!}{Extension: raw\_tex}}\label{extension-rawux5ftex}

In addition to raw HTML, pandoc allows raw LaTeX, TeX, and ConTeXt to be
included in a document. Inline TeX commands will be preserved and passed
unchanged to the LaTeX and ConTeXt writers. Thus, for example, you can
use LaTeX to include BibTeX citations:

\begin{lstlisting}
This result was proved in \cite{jones.1967}.
\end{lstlisting}

Note that in LaTeX environments, like

\begin{lstlisting}
\begin{tabular}{|l|l|}\hline
Age & Frequency \\ \hline
18--25  & 15 \\
26--35  & 33 \\
36--45  & 22 \\ \hline
\end{tabular}
\end{lstlisting}

the material between the begin and end tags will be interpreted as raw
LaTeX, not as markdown.

Inline LaTeX is ignored in output formats other than Markdown, LaTeX,
and ConTeXt.

\section{LaTeX macros}\label{latex-macros}

\subsubsection{\texorpdfstring{Extension:
\lstinline!latex_macros!}{Extension: latex\_macros}}\label{extension-latexux5fmacros}

For output formats other than LaTeX, pandoc will parse LaTeX
\lstinline!\newcommand! and \lstinline!\renewcommand! definitions and
apply the resulting macros to all LaTeX math. So, for example, the
following will work in all output formats, not just LaTeX:

    \newcommand{\tuple}[1]{\langle #1 \rangle}

    

\(\tuple{a, b, c}\)

In LaTeX output, the \lstinline!\newcommand! definition will simply be
passed unchanged to the output.

\section{Links}\label{links}

Markdown allows links to be specified in several ways.

\subsection{Automatic links}\label{automatic-links}

If you enclose a URL or email address in pointy brackets, it will become
a link:

\begin{lstlisting}
<http://google.com>
<sam@green.eggs.ham>
\end{lstlisting}

\subsection{Inline links}\label{inline-links}

An inline link consists of the link text in square brackets, followed by
the URL in parentheses. (Optionally, the URL can be followed by a link
title, in quotes.)

\begin{lstlisting}
This is an [inline link](/url), and here's [one with
a title](http://fsf.org "click here for a good time!").
\end{lstlisting}

There can be no space between the bracketed part and the parenthesized
part. The link text can contain formatting (such as emphasis), but the
title cannot.

Email addresses in inline links are not autodetected, so they have to be
prefixed with \lstinline!mailto!:

\begin{lstlisting}
[Write me!](mailto:sam@green.eggs.ham)
\end{lstlisting}

\subsection{Reference links}\label{reference-links}

An \emph{explicit} reference link has two parts, the link itself and the
link definition, which may occur elsewhere in the document (either
before or after the link).

The link consists of link text in square brackets, followed by a label
in square brackets. (There can be space between the two.) The link
definition consists of the bracketed label, followed by a colon and a
space, followed by the URL, and optionally (after a space) a link title
either in quotes or in parentheses. The label must not be parseable as a
citation (assuming the \lstinline!citations! extension is enabled):
citations take precedence over link labels.

Here are some examples:

\begin{lstlisting}
[my label 1]: /foo/bar.html  "My title, optional"
[my label 2]: /foo
[my label 3]: http://fsf.org (The free software foundation)
[my label 4]: /bar#special  'A title in single quotes'
\end{lstlisting}

The URL may optionally be surrounded by angle brackets:

\begin{lstlisting}
[my label 5]: <http://foo.bar.baz>
\end{lstlisting}

The title may go on the next line:

\begin{lstlisting}
[my label 3]: http://fsf.org
  "The free software foundation"
\end{lstlisting}

Note that link labels are not case sensitive. So, this will work:

\begin{lstlisting}
Here is [my link][FOO]

[Foo]: /bar/baz
\end{lstlisting}

In an \emph{implicit} reference link, the second pair of brackets is
empty, or omitted entirely:

\begin{lstlisting}
See [my website][], or [my website].

[my website]: http://foo.bar.baz
\end{lstlisting}

Note: In \lstinline!Markdown.pl! and most other markdown
implementations, reference link definitions cannot occur in nested
constructions such as list items or block quotes. Pandoc lifts this
arbitrary seeming restriction. So the following is fine in pandoc,
though not in most other implementations:

\begin{lstlisting}
> My block [quote].
>
> [quote]: /foo
\end{lstlisting}

\subsection{Internal links}\label{internal-links}

To link to another section of the same document, use the automatically
generated identifier (see
\hyperref[header-identifiers-in-html-latex-and-context]{Header
identifiers in HTML, LaTeX, and ConTeXt}, below). For example:

\begin{lstlisting}
See the [Introduction](#introduction).
\end{lstlisting}

or

\begin{lstlisting}
See the [Introduction].

[Introduction]: #introduction
\end{lstlisting}

Internal links are currently supported for HTML formats (including HTML
slide shows and EPUB), LaTeX, and ConTeXt.

\section{Images}\label{images}

A link immediately preceded by a \lstinline"!" will be treated as an
image. The link text will be used as the image's alt text:

\begin{lstlisting}
![la lune](lalune.jpg "Voyage to the moon")

![movie reel]

[movie reel]: movie.gif
\end{lstlisting}

\subsubsection{\texorpdfstring{Extension:
\lstinline!implicit_figures!}{Extension: implicit\_figures}}\label{extension-implicitux5ffigures}

An image occurring by itself in a paragraph will be rendered as a figure
with a caption.\footnote{This feature is not yet implemented for RTF,
  OpenDocument, or ODT. In those formats, you'll just get an image in a
  paragraph by itself, with no caption.} (In LaTeX, a figure environment
will be used; in HTML, the image will be placed in a \lstinline!div!
with class \lstinline!figure!, together with a caption in a
\lstinline!p! with class \lstinline!caption!.) The image's alt text will
be used as the caption.

\begin{lstlisting}
![This is the caption](/url/of/image.png)
\end{lstlisting}

If you just want a regular inline image, just make sure it is not the
only thing in the paragraph. One way to do this is to insert a
nonbreaking space after the image:

\begin{lstlisting}
![This image won't be a figure](/url/of/image.png)\
\end{lstlisting}

\section{Footnotes}\label{footnotes}

\subsubsection{\texorpdfstring{Extension:
\lstinline!footnotes!}{Extension: footnotes}}\label{extension-footnotes}

Pandoc's markdown allows footnotes, using the following syntax:

\begin{lstlisting}
Here is a footnote reference,[^1] and another.[^longnote]

[^1]: Here is the footnote.

[^longnote]: Here's one with multiple blocks.

    Subsequent paragraphs are indented to show that they
belong to the previous footnote.

        { some.code }

    The whole paragraph can be indented, or just the first
    line.  In this way, multi-paragraph footnotes work like
    multi-paragraph list items.

This paragraph won't be part of the note, because it
isn't indented.
\end{lstlisting}

The identifiers in footnote references may not contain spaces, tabs, or
newlines. These identifiers are used only to correlate the footnote
reference with the note itself; in the output, footnotes will be
numbered sequentially.

The footnotes themselves need not be placed at the end of the document.
They may appear anywhere except inside other block elements (lists,
block quotes, tables, etc.).

\subsubsection{\texorpdfstring{Extension:
\lstinline!inline_notes!}{Extension: inline\_notes}}\label{extension-inlineux5fnotes}

Inline footnotes are also allowed (though, unlike regular notes, they
cannot contain multiple paragraphs). The syntax is as follows:

\begin{lstlisting}
Here is an inline note.^[Inlines notes are easier to write, since
you don't have to pick an identifier and move down to type the
note.]
\end{lstlisting}

Inline and regular footnotes may be mixed freely.

\section{Citations}\label{citations}

\subsubsection{\texorpdfstring{Extension:
\lstinline!citations!}{Extension: citations}}\label{extension-citations}

Using an external filter, \lstinline!pandoc-citeproc!, pandoc can
automatically generate citations and a bibliography in a number of
styles. Basic usage is

\begin{lstlisting}
pandoc --filter pandoc-citeproc myinput.txt
\end{lstlisting}

In order to use this feature, you will need to specify a bibliography
file using the \lstinline!bibliography! metadata field in a YAML
metadata section. The bibliography may have any of these formats:

\begin{longtable}[c]{@{}ll@{}}
\toprule
Format & File extension\tabularnewline
\midrule
\endhead
MODS & .mods\tabularnewline
BibLaTeX & .bib\tabularnewline
BibTeX & .bibtex\tabularnewline
RIS & .ris\tabularnewline
EndNote & .enl\tabularnewline
EndNote XML & .xml\tabularnewline
ISI & .wos\tabularnewline
MEDLINE & .medline\tabularnewline
Copac & .copac\tabularnewline
JSON citeproc & .json\tabularnewline
\bottomrule
\end{longtable}

Note that \lstinline!.bib! can generally be used with both BibTeX and
BibLaTeX files, but you can use \lstinline!.bibtex! to force BibTeX.

As an alternative to specifying a bibliography file, you can include the
citation data directly in the \lstinline!references! field of the
document's YAML metadata. The field should contain an array of
YAML-encoded references, for example:

\begin{lstlisting}
---
references:
- id: fenner2012a
  title: One-click science marketing
  author:
  - family: Fenner
    given: Martin
  container-title: Nature Materials
  volume: 11
  URL: 'http://dx.doi.org/10.1038/nmat3283'
  DOI: 10.1038/nmat3283
  issue: 4
  publisher: Nature Publishing Group
  page: 261-263
  type: article-journal
  issued:
    year: 2012
    month: 3
...
\end{lstlisting}

(The program \lstinline!mods2yaml!, which comes with
\lstinline!pandoc-citeproc!, can help produce these from a MODS
reference collection.)

By default, \lstinline!pandoc-citeproc! will use a Chicago author-date
format for citations and references. To use another style, you will need
to specify a \href{http://CitationStyles.org}{CSL} 1.0 style file in the
\lstinline!csl! metadata field. A primer on creating and modifying CSL
styles can be found at
\url{http://citationstyles.org/downloads/primer.html}. A repository of
CSL styles can be found at
\url{https://github.com/citation-style-language/styles}. See also
\url{http://zotero.org/styles} for easy browsing.

Citations go inside square brackets and are separated by semicolons.
Each citation must have a key, composed of `@' + the citation identifier
from the database, and may optionally have a prefix, a locator, and a
suffix. The citation key must begin with a letter or \lstinline!_!, and
may contain alphanumerics, \lstinline!_!, and internal punctuation
characters (\lstinline!:.#$%&-+?<>~/!). Here are some examples:

\begin{lstlisting}
Blah blah [see @doe99, pp. 33-35; also @smith04, ch. 1].

Blah blah [@doe99, pp. 33-35, 38-39 and *passim*].

Blah blah [@smith04; @doe99].
\end{lstlisting}

A minus sign (\lstinline!-!) before the \lstinline!@! will suppress
mention of the author in the citation. This can be useful when the
author is already mentioned in the text:

\begin{lstlisting}
Smith says blah [-@smith04].
\end{lstlisting}

You can also write an in-text citation, as follows:

\begin{lstlisting}
@smith04 says blah.

@smith04 [p. 33] says blah.
\end{lstlisting}

If the style calls for a list of works cited, it will be placed at the
end of the document. Normally, you will want to end your document with
an appropriate header:

\begin{lstlisting}
last paragraph...

# References
\end{lstlisting}

The bibliography will be inserted after this header. Note that the
\lstinline!unnumbered! class will be added to this header, so that the
section will not be numbered.

If you want to include items in the bibliography without actually citing
them in the body text, you can define a dummy \lstinline!nocite!
metadata field and put the citations there:

\begin{lstlisting}
---
nocite: |
  @item1, @item2
...

@item3
\end{lstlisting}

In this example, the document will contain a citation for
\lstinline!item3! only, but the bibliography will contain entries for
\lstinline!item1!, \lstinline!item2!, and \lstinline!item3!.

\hyperdef{}{non-pandoc-extensions}{\section{Non-pandoc
extensions}\label{non-pandoc-extensions}}

The following markdown syntax extensions are not enabled by default in
pandoc, but may be enabled by adding \lstinline!+EXTENSION! to the
format name, where \lstinline!EXTENSION! is the name of the extension.
Thus, for example, \lstinline!markdown+hard_line_breaks! is markdown
with hard line breaks.

\subsubsection{\texorpdfstring{Extension:
\lstinline!lists_without_preceding_blankline!}{Extension: lists\_without\_preceding\_blankline}}\label{extension-listsux5fwithoutux5fprecedingux5fblankline}

Allow a list to occur right after a paragraph, with no intervening blank
space.

\subsubsection{\texorpdfstring{Extension:
\lstinline!hard_line_breaks!}{Extension: hard\_line\_breaks}}\label{extension-hardux5flineux5fbreaks}

Causes all newlines within a paragraph to be interpreted as hard line
breaks instead of spaces.

\subsubsection{\texorpdfstring{Extension:
\lstinline!ignore_line_breaks!}{Extension: ignore\_line\_breaks}}\label{extension-ignoreux5flineux5fbreaks}

Causes newlines within a paragraph to be ignored, rather than being
treated as spaces or as hard line breaks. This option is intended for
use with East Asian languages where spaces are not used between words,
but text is divided into lines for readability.

\subsubsection{\texorpdfstring{Extension:
\lstinline!tex_math_single_backslash!}{Extension: tex\_math\_single\_backslash}}\label{extension-texux5fmathux5fsingleux5fbackslash}

Causes anything between \lstinline!\(! and \lstinline!\)! to be
interpreted as inline TeX math, and anything between \lstinline!\[! and
\lstinline!\]! to be interpreted as display TeX math. Note: a drawback
of this extension is that it precludes escaping \lstinline!(! and
\lstinline![!.

\subsubsection{\texorpdfstring{Extension:
\lstinline!tex_math_double_backslash!}{Extension: tex\_math\_double\_backslash}}\label{extension-texux5fmathux5fdoubleux5fbackslash}

Causes anything between \lstinline!\\(! and \lstinline!\\)! to be
interpreted as inline TeX math, and anything between \lstinline!\\[! and
\lstinline!\\]! to be interpreted as display TeX math.

\subsubsection{\texorpdfstring{Extension:
\lstinline!markdown_attribute!}{Extension: markdown\_attribute}}\label{extension-markdownux5fattribute}

By default, pandoc interprets material inside block-level tags as
markdown. This extension changes the behavior so that markdown is only
parsed inside block-level tags if the tags have the attribute
\lstinline!markdown=1!.

\subsubsection{\texorpdfstring{Extension:
\lstinline!mmd_title_block!}{Extension: mmd\_title\_block}}\label{extension-mmdux5ftitleux5fblock}

Enables a \href{http://fletcherpenney.net/multimarkdown/}{MultiMarkdown}
style title block at the top of the document, for example:

\begin{lstlisting}
Title:   My title
Author:  John Doe
Date:    September 1, 2008
Comment: This is a sample mmd title block, with
         a field spanning multiple lines.
\end{lstlisting}

See the MultiMarkdown documentation for details. If
\lstinline!pandoc_title_block! or \lstinline!yaml_metadata_block! is
enabled, it will take precedence over \lstinline!mmd_title_block!.

\subsubsection{\texorpdfstring{Extension:
\lstinline!abbreviations!}{Extension: abbreviations}}\label{extension-abbreviations}

Parses PHP Markdown Extra abbreviation keys, like

\begin{lstlisting}
*[HTML]: Hyper Text Markup Language
\end{lstlisting}

Note that the pandoc document model does not support abbreviations, so
if this extension is enabled, abbreviation keys are simply skipped (as
opposed to being parsed as paragraphs).

\subsubsection{\texorpdfstring{Extension:
\lstinline!autolink_bare_uris!}{Extension: autolink\_bare\_uris}}\label{extension-autolinkux5fbareux5furis}

Makes all absolute URIs into links, even when not surrounded by pointy
braces \lstinline!<...>!.

\subsubsection{\texorpdfstring{Extension:
\lstinline!ascii_identifiers!}{Extension: ascii\_identifiers}}\label{extension-asciiux5fidentifiers}

Causes the identifiers produced by \lstinline!auto_identifiers! to be
pure ASCII. Accents are stripped off of accented latin letters, and
non-latin letters are omitted.

\subsubsection{\texorpdfstring{Extension:
\lstinline!link_attributes!}{Extension: link\_attributes}}\label{extension-linkux5fattributes}

Parses multimarkdown style key-value attributes on link and image
references. Note that pandoc's internal document model provides nowhere
to put these, so they are presently just ignored.

\subsubsection{\texorpdfstring{Extension:
\lstinline!mmd_header_identifiers!}{Extension: mmd\_header\_identifiers}}\label{extension-mmdux5fheaderux5fidentifiers}

Parses multimarkdown style header identifiers (in square brackets, after
the header but before any trailing \lstinline!#!s in an ATX header).

\subsubsection{\texorpdfstring{Extension:
\lstinline!compact_definition_lists!}{Extension: compact\_definition\_lists}}\label{extension-compactux5fdefinitionux5flists}

Activates the definition list syntax of pandoc 1.12.x and earlier. This
syntax differs from the one described \hyperref[definition-lists]{above}
in several respects:

\begin{itemize}
\itemsep1pt\parskip0pt\parsep0pt
\item
  No blank line is required between consecutive items of the definition
  list.
\item
  To get a ``tight'' or ``compact'' list, omit space between consecutive
  items; the space between a term and its definition does not affect
  anything.
\item
  Lazy wrapping of paragraphs is not allowed: the entire definition must
  be indented four spaces.\footnote{To see why laziness is incompatible
    with relaxing the requirement of a blank line between items,
    consider the following example: bar : definition foo : definition Is
    this a single list item with two definitions of ``bar,'' the first
    of which is lazily wrapped, or two list items? To remove the
    ambiguity we must either disallow lazy wrapping or require a blank
    line between list items.}
\end{itemize}

\section{Markdown variants}\label{markdown-variants}

In addition to pandoc's extended markdown, the following markdown
variants are supported:

\begin{description}
\itemsep1pt\parskip0pt\parsep0pt
\item[\lstinline!markdown_phpextra! (PHP Markdown Extra)]
\lstinline!footnotes!, \lstinline!pipe_tables!, \lstinline!raw_html!,
\lstinline!markdown_attribute!, \lstinline!fenced_code_blocks!,
\lstinline!definition_lists!, \lstinline!intraword_underscores!,
\lstinline!header_attributes!, \lstinline!abbreviations!.
\item[\lstinline!markdown_github! (Github-flavored Markdown)]
\lstinline!pipe_tables!, \lstinline!raw_html!,
\lstinline!tex_math_single_backslash!, \lstinline!fenced_code_blocks!,
\lstinline!auto_identifiers!, \lstinline!ascii_identifiers!,
\lstinline!backtick_code_blocks!, \lstinline!autolink_bare_uris!,
\lstinline!intraword_underscores!, \lstinline!strikeout!,
\lstinline!hard_line_breaks!
\item[\lstinline!markdown_mmd! (MultiMarkdown)]
\lstinline!pipe_tables! \lstinline!raw_html!,
\lstinline!markdown_attribute!, \lstinline!link_attributes!,
\lstinline!raw_tex!, \lstinline!tex_math_double_backslash!,
\lstinline!intraword_underscores!, \lstinline!mmd_title_block!,
\lstinline!footnotes!, \lstinline!definition_lists!,
\lstinline!all_symbols_escapable!,
\lstinline!implicit_header_references!, \lstinline!auto_identifiers!,
\lstinline!mmd_header_identifiers!
\item[\lstinline!markdown_strict! (Markdown.pl)]
\lstinline!raw_html!
\end{description}

\section{Extensions with formats other than
markdown}\label{extensions-with-formats-other-than-markdown}

Some of the extensions discussed above can be used with formats other
than markdown:

\begin{itemize}
\item
  \lstinline!auto_identifiers! can be used with \lstinline!latex!,
  \lstinline!rst!, \lstinline!mediawiki!, and \lstinline!textile! input
  (and is used by default).
\item
  \lstinline!tex_math_dollars!, \lstinline!tex_math_single_backslash!,
  and \lstinline!tex_math_double_backslash! can be used with
  \lstinline!html! input. (This is handy for reading web pages formatted
  using MathJax, for example.)
\end{itemize}

\chapter{Producing slide shows with
Pandoc}\label{producing-slide-shows-with-pandoc}

You can use Pandoc to produce an HTML + javascript slide presentation
that can be viewed via a web browser. There are five ways to do this,
using \href{http://meyerweb.com/eric/tools/s5/}{S5},
\href{http://paulrouget.com/dzslides/}{DZSlides},
\href{http://www.w3.org/Talks/Tools/Slidy/}{Slidy},
\href{http://goessner.net/articles/slideous/}{Slideous}, or
\href{http://lab.hakim.se/reveal-js/}{reveal.js}. You can also produce a
PDF slide show using LaTeX
\href{http://www.tex.ac.uk/CTAN/macros/latex/contrib/beamer}{beamer}.

Here's the markdown source for a simple slide show,
\lstinline!habits.txt!:

\begin{lstlisting}
% Habits
% John Doe
% March 22, 2005

# In the morning

## Getting up

- Turn off alarm
- Get out of bed

## Breakfast

- Eat eggs
- Drink coffee

# In the evening

## Dinner

- Eat spaghetti
- Drink wine

------------------

![picture of spaghetti](images/spaghetti.jpg)

## Going to sleep

- Get in bed
- Count sheep
\end{lstlisting}

To produce an HTML/javascript slide show, simply type

\begin{lstlisting}
pandoc -t FORMAT -s habits.txt -o habits.html
\end{lstlisting}

where \lstinline!FORMAT! is either \lstinline!s5!, \lstinline!slidy!,
\lstinline!slideous!, \lstinline!dzslides!, or \lstinline!revealjs!.

For Slidy, Slideous, reveal.js, and S5, the file produced by pandoc with
the \lstinline!-s/--standalone! option embeds a link to javascripts and
CSS files, which are assumed to be available at the relative path
\lstinline!s5/default! (for S5), \lstinline!slideous! (for Slideous),
\lstinline!reveal.js! (for reveal.js), or at the Slidy website at
\lstinline!w3.org! (for Slidy). (These paths can be changed by setting
the \lstinline!slidy-url!, \lstinline!slideous-url!,
\lstinline!revealjs-url!, or \lstinline!s5-url! variables; see
\lstinline!--variable!, above.) For DZSlides, the (relatively short)
javascript and css are included in the file by default.

With all HTML slide formats, the \lstinline!--self-contained! option can
be used to produce a single file that contains all of the data necessary
to display the slide show, including linked scripts, stylesheets,
images, and videos.

To produce a PDF slide show using beamer, type

\begin{lstlisting}
pandoc -t beamer habits.txt -o habits.pdf
\end{lstlisting}

Note that a reveal.js slide show can also be converted to a PDF by
printing it to a file from the browser.

\hyperdef{}{structuring-the-slide-show}{\section{Structuring the slide
show}\label{structuring-the-slide-show}}

By default, the \emph{slide level} is the highest header level in the
hierarchy that is followed immediately by content, and not another
header, somewhere in the document. In the example above, level 1 headers
are always followed by level 2 headers, which are followed by content,
so 2 is the slide level. This default can be overridden using the
\lstinline!--slide-level! option.

The document is carved up into slides according to the following rules:

\begin{itemize}
\item
  A horizontal rule always starts a new slide.
\item
  A header at the slide level always starts a new slide.
\item
  Headers \emph{below} the slide level in the hierarchy create headers
  \emph{within} a slide.
\item
  Headers \emph{above} the slide level in the hierarchy create ``title
  slides,'' which just contain the section title and help to break the
  slide show into sections.
\item
  A title page is constructed automatically from the document's title
  block, if present. (In the case of beamer, this can be disabled by
  commenting out some lines in the default template.)
\end{itemize}

These rules are designed to support many different styles of slide show.
If you don't care about structuring your slides into sections and
subsections, you can just use level 1 headers for all each slide. (In
that case, level 1 will be the slide level.) But you can also structure
the slide show into sections, as in the example above.

Note: in reveal.js slide shows, if slide level is 2, a two-dimensional
layout will be produced, with level 1 headers building horizontally and
level 2 headers building vertically. It is not recommended that you use
deeper nesting of section levels with reveal.js.

\section{Incremental lists}\label{incremental-lists}

By default, these writers produces lists that display ``all at once.''
If you want your lists to display incrementally (one item at a time),
use the \lstinline!-i! option. If you want a particular list to depart
from the default (that is, to display incrementally without the
\lstinline!-i! option and all at once with the \lstinline!-i! option),
put it in a block quote:

\begin{lstlisting}
> - Eat spaghetti
> - Drink wine
\end{lstlisting}

In this way incremental and nonincremental lists can be mixed in a
single document.

\section{Inserting pauses}\label{inserting-pauses}

You can add ``pauses'' within a slide by including a paragraph
containing three dots, separated by spaces:

\begin{lstlisting}
# Slide with a pause

content before the pause

. . .

content after the pause
\end{lstlisting}

\section{Styling the slides}\label{styling-the-slides}

You can change the style of HTML slides by putting customized CSS files
in \lstinline!$DATADIR/s5/default! (for S5), \lstinline!$DATADIR/slidy!
(for Slidy), or \lstinline!$DATADIR/slideous! (for Slideous), where
\lstinline!$DATADIR! is the user data directory (see
\lstinline!--data-dir!, above). The originals may be found in pandoc's
system data directory (generally
\lstinline!$CABALDIR/pandoc-VERSION/s5/default!). Pandoc will look there
for any files it does not find in the user data directory.

For dzslides, the CSS is included in the HTML file itself, and may be
modified there.

For reveal.js, themes can be used by setting the \lstinline!theme!
variable, for example:

\begin{lstlisting}
-V theme=moon
\end{lstlisting}

Or you can specify a custom stylesheet using the \lstinline!--css!
option.

To style beamer slides, you can specify a beamer ``theme'' or
``colortheme'' using the \lstinline!-V! option:

\begin{lstlisting}
pandoc -t beamer habits.txt -V theme:Warsaw -o habits.pdf
\end{lstlisting}

Note that header attributes will turn into slide attributes (on a
\lstinline!<div>! or \lstinline!<section>!) in HTML slide formats,
allowing you to style individual slides. In Beamer, the only header
attribute that affects slides is the \lstinline!allowframebreaks! class,
which sets the \lstinline!allowframebreaks! option, causing multiple
slides to be created if the content overfills the frame. This is
recommended especially for bibliographies:

\begin{lstlisting}
# References {.allowframebreaks}
\end{lstlisting}

\section{Speaker notes}\label{speaker-notes}

reveal.js has good support for speaker notes. You can add notes to your
markdown document thus:

\begin{lstlisting}
<div class="notes">
This is my note.

- It can contain markdown
- like this list

</div>
\end{lstlisting}

To show the notes window, press \lstinline!s! while viewing the
presentation. Notes are not yet supported for other slide formats, but
the notes will not appear on the slides themselves.

\hyperdef{}{epub-metadata}{\chapter{EPUB Metadata}\label{epub-metadata}}

EPUB metadata may be specified using the \lstinline!--epub-metadata!
option, but if the source document is markdown, it is better to use a
YAML metadata block. Here is an example:

\begin{lstlisting}
---
title:
- type: main
  text: My Book
- type: subtitle
  text: An investigation of metadata
creator:
- role: author
  text: John Smith
- role: editor
  text: Sarah Jones
identifier:
- scheme: DOI
  text: doi:10.234234.234/33
publisher:  My Press
rights: (C) 2007 John Smith, CC BY-NC
...
\end{lstlisting}

The following fields are recognized:

\begin{description}
\itemsep1pt\parskip0pt\parsep0pt
\item[\lstinline!identifier!]
Either a string value or an object with fields \lstinline!text! and
\lstinline!scheme!. Valid values for \lstinline!scheme! are
\lstinline!ISBN-10!, \lstinline!GTIN-13!, \lstinline!UPC!,
\lstinline!ISMN-10!, \lstinline!DOI!, \lstinline!LCCN!,
\lstinline!GTIN-14!, \lstinline!ISBN-13!,
\lstinline!Legal deposit number!, \lstinline!URN!, \lstinline!OCLC!,
\lstinline!ISMN-13!, \lstinline!ISBN-A!, \lstinline!JP!,
\lstinline!OLCC!.
\item[\lstinline!title!]
Either a string value, or an object with fields \lstinline!file-as! and
\lstinline!type!, or a list of such objects. Valid values for
\lstinline!type! are \lstinline!main!, \lstinline!subtitle!,
\lstinline!short!, \lstinline!collection!, \lstinline!edition!,
\lstinline!extended!.
\item[\lstinline!creator!]
Either a string value, or an object with fields \lstinline!role!,
\lstinline!file-as!, and \lstinline!text!, or a list of such objects.
Valid values for \lstinline!role! are
\href{http://www.loc.gov/marc/relators/relaterm.html}{marc relators},
but pandoc will attempt to translate the human-readable versions (like
``author'' and ``editor'') to the appropriate marc relators.
\item[\lstinline!contributor!]
Same format as \lstinline!creator!.
\item[\lstinline!date!]
A string value in \lstinline!YYYY-MM-DD! format. (Only the year is
necessary.) Pandoc will attempt to convert other common date formats.
\item[\lstinline!language!]
A string value in \href{http://tools.ietf.org/html/rfc5646}{RFC5646}
format. Pandoc will default to the local language if nothing is
specified.
\item[\lstinline!subject!]
A string value or a list of such values.
\item[\lstinline!description!]
A string value.
\item[\lstinline!type!]
A string value.
\item[\lstinline!format!]
A string value.
\item[\lstinline!relation!]
A string value.
\item[\lstinline!coverage!]
A string value.
\item[\lstinline!rights!]
A string value.
\item[\lstinline!cover-image!]
A string value (path to cover image).
\item[\lstinline!stylesheet!]
A string value (path to CSS stylesheet).
\item[\lstinline!page-progression-direction!]
Either \lstinline!ltr! or \lstinline!rtl!. Specifies the
\lstinline!page-progression-direction! spine
\href{http://www.idpf.org/epub/301/spec/epub-publications.html\#sec-spine-elem}{attribute}.
\end{description}

\hyperdef{}{literate-haskell-support}{\chapter{Literate Haskell
support}\label{literate-haskell-support}}

If you append \lstinline!+lhs! (or \lstinline!+literate_haskell!) to an
appropriate input or output format (\lstinline!markdown!,
\lstinline!markdown_strict!, \lstinline!rst!, or \lstinline!latex! for
input or output; \lstinline!beamer!, \lstinline!html! or
\lstinline!html5! for output only), pandoc will treat the document as
literate Haskell source. This means that

\begin{itemize}
\item
  In markdown input, ``bird track'' sections will be parsed as Haskell
  code rather than block quotations. Text between
  \lstinline!\begin{code}! and \lstinline!\end{code}! will also be
  treated as Haskell code.
\item
  In markdown output, code blocks with classes \lstinline!haskell! and
  \lstinline!literate! will be rendered using bird tracks, and block
  quotations will be indented one space, so they will not be treated as
  Haskell code. In addition, headers will be rendered setext-style (with
  underlines) rather than atx-style (with `\#' characters). (This is
  because ghc treats `\#' characters in column 1 as introducing line
  numbers.)
\item
  In restructured text input, ``bird track'' sections will be parsed as
  Haskell code.
\item
  In restructured text output, code blocks with class
  \lstinline!haskell! will be rendered using bird tracks.
\item
  In LaTeX input, text in \lstinline!code! environments will be parsed
  as Haskell code.
\item
  In LaTeX output, code blocks with class \lstinline!haskell! will be
  rendered inside \lstinline!code! environments.
\item
  In HTML output, code blocks with class \lstinline!haskell! will be
  rendered with class \lstinline!literatehaskell! and bird tracks.
\end{itemize}

Examples:

\begin{lstlisting}
pandoc -f markdown+lhs -t html
\end{lstlisting}

reads literate Haskell source formatted with markdown conventions and
writes ordinary HTML (without bird tracks).

\begin{lstlisting}
pandoc -f markdown+lhs -t html+lhs
\end{lstlisting}

writes HTML with the Haskell code in bird tracks, so it can be copied
and pasted as literate Haskell source.

\hyperdef{}{custom-writers}{\chapter{Custom
writers}\label{custom-writers}}

Pandoc can be extended with custom writers written in
\href{http://www.lua.org}{lua}. (Pandoc includes a lua interpreter, so
lua need not be installed separately.)

To use a custom writer, simply specify the path to the lua script in
place of the output format. For example:

\begin{lstlisting}
pandoc -t data/sample.lua
\end{lstlisting}

Creating a custom writer requires writing a lua function for each
possible element in a pandoc document. To get a documented example which
you can modify according to your needs, do

\begin{lstlisting}
pandoc --print-default-data-file sample.lua
\end{lstlisting}

\chapter{Authors}\label{authors}

Â© 2006-2013 John MacFarlane (jgm at berkeley dot edu). Released under
the \href{http://www.gnu.org/copyleft/gpl.html}{GPL}, version 2 or
greater. This software carries no warranty of any kind. (See COPYRIGHT
for full copyright and warranty notices.) Other contributors include
Recai OktaÅŸ, Paulo Tanimoto, Peter Wang, Andrea Rossato, Eric Kow,
infinity0x, Luke Plant, shreevatsa.public, Puneeth Chaganti, Paul
Rivier, rodja.trappe, Bradley Kuhn, thsutton, Nathan Gass, Jonathan
Daugherty, JÃ©rÃ©my Bobbio, Justin Bogner, qerub, Christopher Sawicki,
Kelsey Hightower, Masayoshi Takahashi, Antoine Latter, Ralf Stephan,
Eric Seidel, B. Scott Michel, Gavin Beatty, Sergey Astanin, Arlo
O'Keeffe, Denis Laxalde, Brent Yorgey, David Lazar, Jamie F. Olson,
Matthew Pickering, Albert Krewinkel, mb21, Jesse Rosenthal.

\end{document}
